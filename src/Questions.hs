{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE NumericUnderscores #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# OPTIONS_GHC -Wno-type-defaults #-}

module Questions where

import Control.Lens (Identity (..), none, toListOf, (^.))
import Control.Monad.Toolbox ((&^&), (|^|))
import Data.Bits (Bits (xor))
import Data.Bits.Lens (bits)
import Data.Char (chr, isAlpha, isDigit, isSpace, ord)
import Data.Foldable.Toolbox
import Data.Function.Toolbox (using)
import Data.List.NonEmpty.Toolbox (NonEmpty (..))
import Data.List.NonEmpty.Toolbox qualified as NE
import Data.List.Toolbox hiding (genericLength)
import Data.Map.Strict (Map)
import Data.Map.Strict qualified as Map
import Data.Maybe (fromMaybe, listToMaybe, mapMaybe)
import Data.Number.BigFloat (BigFloat)
import Data.Number.Fixed (Prec500)
import Data.Ord (Down (Down))
import Data.Polynomial qualified as Poly
import Data.Set (Set)
import Data.Set qualified as Set
import Data.Time (DayOfWeek (Sunday), dayOfWeek, fromGregorian)
import Data.Tuple.Toolbox (first, fst3, second, snd3, thd3, (&&&))
import Data.Vector (Vector, (!))
import Data.Vector qualified as Vector
import Data.Word (Word32)
import FunctionExtra
import GHC.Real (Ratio ((:%)))
import Math.Combinat.Partitions.Integer (Partition, countPartitions, fromPartition, partitions)
import NumbersExtra
import Poker (in054)
import Sudoku (Sudoku, solve, sudoku)

{- |
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
-}
q001 :: IO Integer
q001 = pure $ sumWhen ((== 0) . (`mod` 3) |^| (== 0) . (`mod` 5)) [1 .. 999]

{- |
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.

    By starting with 1 and 2, the first 10 terms will be:

        @1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...@

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}
q002 :: IO Integer
q002 = pure . sumWhen even $ takeWhile (< 4_000_000) fibonaccis

{- |
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143?
-}
q003 :: IO Integer
q003 = pure . maximum $ primeFactors 600_851_475_143

{- |
    A /palindromic number/ reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
-}
q004 :: IO Integer
q004 = pure . fromMaybe 0 . find palindrome $ sortOn Down [a * b | a <- [999, 998 .. 100], b <- [a, pred a .. 100]]

{- |
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
-}
q005 :: IO Integer
q005 = pure $ foldl' lcm 1 [2 .. 20]

{- |
    The sum of the squares of the first ten natural numbers is,

        1² + 2² + ... + 10² = 385

    The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)² = 55² = 3025

    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is

        3025 − 385 = 2640.

    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
-}
q006 :: IO Integer
q006 = pure $ sum [1 .. 100] ^ 2 - sum (take 100 squares)

{- |
    By listing the first six prime numbers:

        @2, 3, 5, 7, 11, 13,@

    we can see that the 6th prime is 13.

    What is the 10001st prime number?
-}
q007 :: IO Integer
q007 = pure $ primes !! 10_000

{- |
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        @73167176531330624919225119674426574742355349194934@

        @96983520312774506326239578318016984801869478851843@

        @85861560789112949495459501737958331952853208805511@

        @12540698747158523863050715693290963295227443043557@

        @66896648950445244523161731856403098711121722383113@

        @62229893423380308135336276614282806444486645238749@

        @30358907296290491560440772390713810515859307960866@

        @70172427121883998797908792274921901699720888093776@

        @65727333001053367881220235421809751254540594752243@

        @52584907711670556013604839586446706324415722155397@

        @53697817977846174064955149290862569321978468622482@

        @83972241375657056057490261407972968652414535100474@

        @82166370484403199890008895243450658541227588666881@

        @16427171479924442928230863465674813919123162824586@

        @17866458359124566529476545682848912883142607690042@

        @24219022671055626321111109370544217506941658960408@

        @07198403850962455444362981230987879927244284909188@

        @84580156166097919133875499200524063689912560717606@

        @05886116467109405077541002256983155200055935729725@

        @71636269561882670428252483600823257530420752963450@

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
-}
q008 :: IO Integer
q008 = pure . maximum $ products in008
  where
    products :: [Integer] -> [Integer]
    products xs
        | length xs < 13 = []
        | otherwise = product (take 13 xs) : products (tail xs)

    in008 :: [Integer]
    in008 = digits

{- |
    A /Pythagorean triplet/ is a set of three natural numbers, a < b < c, for which a² + b² = c². For example,

        3² + 4² = 9 + 16 = 25 = 5².

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.

    Find the product abc.
-}
q009 :: IO Integer
q009 = pure . maybe 0 product . find ((== 1000) . sum) $ takeWhile ((< 1000) . (^. _z)) pythags

{- |
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
-}
q010 :: IO Integer
q010 = pure . sum $ takeWhile (< 2_000_000) primes

{- |
    In the 20×20 grid below, four numbers along a diagonal line have been marked with parentheses.

        @08  02  22  97  38  15  00  40  00  75  04  05  07  78  52  12  50  77  91  08@

        @49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  04  56  62  00@

        @81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  03  49  13  36  65@

        @52  70  95  23  04  60  11  42  69  24  68  56  01  32  56  71  37  02  36  91@

        @22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80@

        @24  47  32  60  99  03  45  02  44  75  33  53  78  36  84  20  35  17  12  50@

        @32  98  81  28  64  23  67  10 (26) 38  40  67  59  54  70  66  18  38  64  70@

        @67  26  20  68  02  62  12  20  95 (63) 94  39  63  08  40  91  66  49  94  21@

        @24  55  58  05  66  73  99  26  97  17 (78) 78  96  83  14  88  34  89  63  72@

        @21  36  23  09  75  00  76  44  20  45  35 (14) 00  61  33  97  34  31  33  95@

        @78  17  53  28  22  75  31  67  15  94  03  80  04  62  16  14  09  53  56  92@

        @16  39  05  42  96  35  31  47  55  58  88  24  00  17  54  24  36  29  85  57@

        @86  56  00  48  35  71  89  07  05  44  44  37  44  60  21  58  51  54  17  58@

        @19  80  81  68  05  94  47  69  28  73  92  13  86  52  17  77  04  89  55  40@

        @04  52  08  83  97  35  99  16  07  97  57  32  16  26  26  79  33  27  98  66@

        @88  36  68  87  57  62  20  72  03  46  33  67  46  55  12  32  63  93  53  69@

        @04  42  16  73  38  25  39  11  24  94  72  18  08  46  29  32  40  62  76  36@

        @20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  04  36  16@

        @20  73  35  29  78  31  90  01  74  31  49  71  48  86  81  16  23  57  05  54@

        @01  70  54  71  83  51  54  69  16  92  33  48  61  43  52  01  89  19  67  48@

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
-}
q011 :: IO Integer
q011 = maximum . ([verts, horizs, udiags, ddiags] <*>) . pure <$> grid
  where
    in011 :: IO [[Integer]]
    in011 = map (map read . words) . lines <$> readFile "./Inputs/011.txt"

    grid :: IO (Map (Integer, Integer) Integer)
    grid = flip (buildGrid 0 0) Map.empty <$> in011
      where
        buildGrid :: Integer -> Integer -> [[Integer]] -> Map (Integer, Integer) Integer -> Map (Integer, Integer) Integer
        buildGrid _ _ [] g = g
        buildGrid r _ ([] : xs) g = buildGrid (r + 1) 0 xs g
        buildGrid r c ((i : ts) : xs) g = buildGrid r (c + 1) (ts : xs) $ Map.insert (r, c) i g

    verts, horizs, udiags, ddiags :: Map (Integer, Integer) Integer -> Integer
    verts g =
        let (row, col) = fst $ Map.findMax g
            newbase = (,) <$> [0 .. row] <*> [0 .. col - 3]
         in foldr (max . (\(r, c) -> g Map.! (r, c) * g Map.! (r, c + 1) * g Map.! (r, c + 2) * g Map.! (r, c + 3))) 0 newbase
    horizs g =
        let (row, col) = fst $ Map.findMax g
            newbase = (,) <$> [0 .. row - 3] <*> [0 .. col]
         in foldr (max . (\(r, c) -> g Map.! (r, c) * g Map.! (r + 1, c) * g Map.! (r + 2, c) * g Map.! (r + 3, c))) 0 newbase
    udiags g =
        let (row, col) = fst $ Map.findMax g
            newbase = (,) <$> [0 .. row - 3] <*> [3 .. col]
         in foldr (max . (\(r, c) -> g Map.! (r, c) * g Map.! (r + 1, c -1) * g Map.! (r + 2, c -2) * g Map.! (r + 3, c -3))) 0 newbase
    ddiags g =
        let (row, col) = fst $ Map.findMax g
            newbase = (,) <$> [0 .. row - 3] <*> [0 .. col - 3]
         in foldr (max . (\(r, c) -> g Map.! (r, c) * g Map.! (r + 1, c + 1) * g Map.! (r + 2, c + 2) * g Map.! (r + 3, c + 3))) 0 newbase

{- |
    The sequence of /triangle numbers/ is generated by adding the natural numbers.

    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    The first ten terms would be:

        @1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...@

    Let us list the factors of the first seven triangle numbers:

        - @ 1: 1@
        - @ 3: 1,@
        - @ 6: 1, 2, 3, 6@
        - @10: 1, 2, 5, 10@
        - @21: 1, 3, 7, 21@
        - @15: 1, 3, 5, 15@
        - @28: 1, 2, 4, 7, 14, 28@

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
-}
q012 :: IO Integer
q012 = pure . fromMaybe 0 $ find ((>= 500) . numDivisors) triangles

{- |
    Work out the first ten digits of the sum of the one-hundred 50-digit numbers in [.\/Inputs\/013.txt](file://./../Inputs/013.txt).
-}
q013 :: IO Integer
q013 = undigits . take 10 . digits . sum <$> in013
  where
    in013 :: IO [Integer]
    in013 = map read . lines <$> readFile "./Inputs/013.txt"

{- |
    The following iterative sequence is defined for the set of positive integers:

        - @n -> n\/2 (n is even)@
        - @n -> 3n + 1 (n is odd)@

    Using the rule above and starting with 13, we generate the following sequence:

        @13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1@

    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.

    Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?
-}
q014 :: IO Integer
q014 = pure . NE.maximumOn1 (length . collatz) $ 1_000_000 :| [999_999, 999_998 .. 1]

{- |
    Starting in the top left corner of a 2×2 grid and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner. How many such routes are there through a 20×20 grid?
-}
q015 :: IO Integer
q015 = pure $ (2 * 20) `choose` 20

{- |
    2^15 = 32768 and the sum of its digits is

        @3 + 2 + 7 + 6 + 8 = 26@

    What is the sum of the digits of the number 21000?
-}
q016 :: IO Integer
q016 = pure . sum . digits $ 2 ^ 1000

{- |
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are

        3 + 3 + 5 + 4 + 4 = 19

    letters used in total. If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?

    /NOTE: Do not genericCount spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters./

    /The use of "and" when writing out numbers is in compliance with British usage./
-}
q017 :: IO Integer
q017 = pure . genericLength $ concatMap getWord [1 .. 1000]
  where
    getWord :: Integer -> String
    getWord = \case
        0 -> ""
        1 -> "One"
        2 -> "Two"
        3 -> "Three"
        4 -> "Four"
        5 -> "Five"
        6 -> "Six"
        7 -> "Seven"
        8 -> "Eight"
        9 -> "Nine"
        10 -> "Ten"
        11 -> "Eleven"
        12 -> "Twelve"
        13 -> "Thirteen"
        14 -> "Fourteen"
        15 -> "Fifteen"
        16 -> "Sixteen"
        17 -> "Seventeen"
        18 -> "Eighteen"
        19 -> "Nineteen"
        1000 -> "OneThousand"
        n ->
            if
                    | n >= 100 ->
                        getWord (n `div` 100) ++ "Hundred"
                            ++ if (n `mod` 100) == 0
                                then ""
                                else "and" ++ getWord (n `mod` 100)
                    | n >= 90 -> "Ninety" ++ getWord (n - 90)
                    | n >= 80 -> "Eighty" ++ getWord (n - 80)
                    | n >= 70 -> "Seventy" ++ getWord (n - 70)
                    | n >= 60 -> "Sixty" ++ getWord (n - 60)
                    | n >= 50 -> "Fifty" ++ getWord (n - 50)
                    | n >= 40 -> "Forty" ++ getWord (n - 40)
                    | n >= 30 -> "Thirty" ++ getWord (n - 30)
                    | otherwise -> "Twenty" ++ getWord (n - 20)

{- |
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

        @   3   @

        @  7 4  @

        @ 2 4 6 @

        @8 5 9 3@

    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom of the triangle in [.\/Inputs\/018.txt](file://./../Inputs/018.txt).

    /NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67 is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method!/ ;)
-}
q018 :: IO Integer
q018 = head . foldr1 algo <$> in018
  where
    in018 :: IO [[Integer]]
    in018 = map (map read . words) . lines <$> readFile "./Inputs/018.txt"

    algo :: [Integer] -> [Integer] -> [Integer]
    algo (x : xs) (y : z : ys) = max (x + y) (x + z) : algo xs (z : ys)
    algo _ _ = []

{- |
    You are given the following information, but you may prefer to do some research for yourself.

        - 1 Jan 1900 was a Monday.
        - Thirty days has September, April, June and November. All the rest have thirty-one, saving February alone, which has twenty-eight, rain or shine; and on leap years, twenty-nine.
        - A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.

    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
-}
q019 :: IO Integer
q019 = pure $ genericCount ((== Sunday) . dayOfWeek) [fromGregorian y m 1 | y <- [1901 .. 2000], m <- [1 .. 12]]

{- |
    n! means n × (n − 1) × ... × 3 × 2 × 1

    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800, and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

    Find the sum of the digits in the number 100!.
-}
q020 :: IO Integer
q020 = pure . sum . digits $ factorial 100

{- |
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).

    If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called /amicable numbers/.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.

    The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.
-}
q021 :: IO Integer
q021 = pure . sum $ filter amicable [1 .. 10_000]

{- |
    Using [.\/Inputs\/022.txt](file://./../Inputs/022.txt), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

    For example, when the list is sorted into alphabetical order, 'COLIN', which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, 'COLIN' would obtain a score of 938 × 53 = 49714.

    What is the total of all the name scores in the file?
-}
q022 :: IO Integer
q022 = sum . zipWith (\x y -> x * sum (map value y)) [1 ..] . sort <$> in022
  where
    in022 :: IO [String]
    in022 = map (filter isAlpha) . splitOn (NE.fromList "\",\"") <$> readFile "./Inputs/022.txt"

    value :: Char -> Integer
    value = maybe 0 fromIntegral . safeHead . (`elemIndices` ('_' : ['A' .. 'Z']))

{- |
    A /perfect number/ is a number for which the sum of its proper divisors is exactly equal to the number.

    For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number. A number n is called /deficient/ if the sum of its proper divisors is less than n, and it is called /abundant/ if this sum exceeds n.

    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24.

    By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis, even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.

    Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
-}
q023 :: IO Integer
q023 = pure . sumWhen (not . isAbundSum) $ Set.fromAscList [1 .. limit]
  where
    limit :: Integer
    limit = 28_123

    abundants :: Set Integer
    abundants = Set.filter abundant $ Set.fromAscList [1 .. limit]

    isAbundSum :: Integer -> Bool
    isAbundSum n = any abundant . Set.map (n -) $ Set.takeWhileAntitone (<= n) abundants

{- |
    A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4.

    If all of the permutations are listed numerically or alphabetically, we call it /lexicographic order/. The lexicographic permutations of 0, 1 and 2 are:

        @012   021   102   120   201   210@

    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
-}
q024 :: IO Integer
q024 = pure . undigits $ sort (permutations [0 .. 9]) !! 999_999

{- |
    The /Fibonacci sequence/ is defined by the recurrence relation:

        F(n) = F(n−1) + F(n−2), where F(1) = 1 and F(2) = 1.

    Hence the first 12 terms will be:

        - @F(1) = 1@
        - @F(2) = 1@
        - @F(3) = 2@
        - @F(4) = 3@
        - @F(5) = 5@
        - @F(6) = 8@
        - @F(7) = 13@
        - @F(8) = 21@
        - @F(9) = 34@
        - @F(10) = 55@
        - @F(11) = 89@
        - @F(12) = 144@

    The 12th term, F(12), is the first term to contain three digits.

    What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
-}
q025 :: IO Integer
q025 = pure . maybe 0 fromIntegral $ findIndex ((== 1000) . length . digits) fibonaccis

{- |
    A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

        - @1\/2  = 0.5@
        - @1\/3  = 0.(3)@
        - @1\/4  = 0.25@
        - @1\/5  = 0.2@
        - @1\/6  = 0.1(6)@
        - @1\/7  = 0.(142857)@
        - @1\/8  = 0.125@
        - @1\/9  = 0.(1)@
        - @1\/10 = 0.1@

    Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle.

    It can be seen that 1\/7 has a 6-digit recurring cycle.

    Find the value of d < 1000 for which 1\/d contains the longest recurring cycle in its decimal fraction part.
-}
q026 :: IO Integer
q026 = pure . NE.maximumOn1 (snd . reciprocalWithCycleLength 1 []) $ 1 :| [2 .. 1000]
  where
    reciprocalWithCycleLength :: Integer -> [Integer] -> Integer -> ([Integer], Maybe Integer)
    reciprocalWithCycleLength n mods x
        | n `mod` x == 0 = ([n `div` x], Nothing)
        | n `mod` x `elem` mods = (mods, Just $ genericLength mods)
        | otherwise = first ((last . digits) (n `div` x) :) $ reciprocalWithCycleLength (10 * n) (n `mod` x : mods) x

{- |
    Euler discovered the remarkable quadratic formula, n² + n + 41. It turns out that the formula will produce 40 primes for the consecutive integer values 0 <= n <= 39. However, when n = 40,

        40² + 40 + 41 = 40(40 + 1) + 41

    is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.

    The incredible formula n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values 0 <= n <= 79. The product of the coefficients, −79 and 1601, is −126479.

    Considering quadratics of the form n² + an + b, where |a| < 1000 and |b| <= 1000, find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.
-}
q027 :: IO Integer
q027 =
    pure . uncurry (*) . fromMaybe (0, 0) $
        maximumOn
            (length . (\(a, b) -> takeWhile (isPrime . (\n -> n * n + a * n + b)) [0 .. 80]))
            [(a, b) | b <- takeWhile (<= 1000) primes, a <- [- (b -2), - (b -4) .. 0]]

{- |
    Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

        @(21) 22  23  24 (25)@

        @ 20  (7)  8  (9) 10 @

        @ 19   6  (1)  2  11 @

        @ 18  (5)  4  (3) 12 @

        @(17) 16  15  14 (13)@

    It can be verified that the sum of the numbers on the diagonals is 101.

    What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
-}
q028 :: IO Integer
q028 = pure . sum $ spiralDiagonals 1001

{- |
    Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

        - @2^2 =  4, 2^3 =   8, 2^4 =  16, 2^5 =   32@
        - @3^2 =  9, 3^3 =  27, 3^4 =  81, 3^5 =  243@
        - @4^2 = 16, 4^3 =  64, 4^4 = 256, 4^5 = 1024@
        - @5^2 = 25, 5^3 = 125, 5^4 = 625, 5^5 = 3125@

    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

        @4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125@

    How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
-}
q029 :: IO Integer
q029 = pure . fromIntegral . Set.size . Set.fromList $ (^) <$> [2 .. 100] <*> [2 .. 100]

{- |
    Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

        - 1634 = 1^4 + 6^4 + 3^4 + 4^4
        - 8208 = 8^4 + 2^4 + 0^4 + 8^4
        - 9474 = 9^4 + 4^4 + 7^4 + 4^4

    As 1 = 1^4 is not a sum it is not included.

    The sum of these numbers is 1634 + 8208 + 9474 = 19316.

    Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
-}
q030 :: IO Integer
q030 = pure $ sumWhen (narcissistic 5) [2 .. 1_000_000]

{- |
    In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:

        1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).

    It is possible to make £2 in the following way:

        1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p

    How many different ways can £2 be made using any number of coins?
-}
q031 :: IO Integer
q031 = pure . fromIntegral $ Poly.countIntegerPartitionsWith [1, 2, 5, 10, 20, 50, 100, 200] 200

{- |
    We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, the 5-digit number, 15234, is 1 through 5 pandigital.

    The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.

    Find the sum of all products whose multiplicand\/multiplier\/product identity can be written as a 1 through 9 pandigital.

    /HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum./
-}
q032 :: IO Integer
q032 = pure . sum . Set.fromList . map (max <$> onefourfour <*> twothreefour) $ pandigitals1 9
  where
    onefourfour :: Integer -> Integer
    onefourfour (digits -> [a, b, c, d, e, f, g, h, i]) =
        if a * undigits [b, c, d, e] == undigits [f, g, h, i]
            then undigits [f, g, h, i]
            else 0
    onefourfour _ = 0

    twothreefour :: Integer -> Integer
    twothreefour (digits -> [a, b, c, d, e, f, g, h, i]) =
        if undigits [a, b] * undigits [c, d, e] == undigits [f, g, h, i]
            then undigits [f, g, h, i]
            else 0
    twothreefour _ = 0

{- |
    The fraction 49\/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49\/98 = 4\/8, which is correct, is obtained by cancelling the 9s. We shall consider fractions like, 30\/50 = 3\/5, to be trivial examples.

    There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator. If the product of these four fractions is given in its lowest common terms, find the value of the denominator.
-}
q033 :: IO Integer
q033 = pure . denominator . productOn (uncurry (%)) $ filter (uncurry curious) [(a, b) | a <- [10 .. 99], b <- [10 .. 99]]
  where
    curious :: Integer -> Integer -> Bool
    curious n d
        | n < d && 0 `notElem` digits n ++ digits d =
            case digits n `intersect` digits d of
                [x] -> n % d == head (digits n \\ [x]) % head (digits d \\ [x])
                _ -> False
        | otherwise = False

{- |
    145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

    Find the sum of all numbers which are equal to the sum of the factorial of their digits.

    /Note: as 1! = 1 and 2! = 2 are not sums they are not included./
-}
q034 :: IO Integer
q034 = pure $ sumWhen ((==) <*> (sumOn (factorial . fromIntegral) . digits)) [3 .. 100_000]

{- |
    The number, 197, is called a /circular prime/ because all rotations of the digits: 197, 971, and 719, are themselves prime.

    There are thirteen such primes below 100:

        @2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97@

    How many circular primes are there below one million?
-}
q035 :: IO Integer
q035 = pure . genericCount circularPrime $ takeWhile (< 1_000_000) primes
  where
    circularPrime :: Integer -> Bool
    circularPrime = (notNull &^& all isPrime) . uncurry take . (length . digits &&& cyclize)

    cyclize :: Integer -> [Integer]
    cyclize n
        | 0 `elem` digits n = []
        | otherwise =
            let n' = undigits $ tail (digits n) ++ take 1 (digits n)
             in n' : cyclize n'

{- |
    The decimal number, 585 = 1001001001₂ (binary), is palindromic in both bases.

    Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

    /(Please note that the palindromic number, in either base, may not include leading zeros.)/
-}
q036 :: IO Integer
q036 = pure $ sumWhen (palindrome &^& palindrome2) [1 .. 1000000]
  where
    palindrome2 :: Integer -> Bool
    -- ! Convert to a Word32 because Integer has arbitrary size
    -- ! and the numbers we're testing are positive and less than 1e6
    palindrome2 n = (\xs -> let xs' = reverse . dropWhile not $ reverse xs in xs' == reverse xs') $ toListOf bits (fromIntegral n :: Word32)

{- |
    The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7.

    Similarly we can work from right to left: 3797, 379, 37, and 3.

    Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

    /NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes./
-}
q037 :: IO Integer
q037 = pure . sumWhen (truncLeft &^& truncRight) . takeWhile (< 1_000_000) $ dropWhile (< 10) primes
  where
    truncLeft :: Integer -> Bool
    truncLeft n
        | n < 10 = isPrime n
        | otherwise = isPrime n && truncLeft (undigits . tail $ digits n)

    truncRight :: Integer -> Bool
    truncRight n
        | n < 10 = isPrime n
        | otherwise = isPrime n && truncRight (undigits . init $ digits n)

{- |
    Take the number 192 and multiply it by each of 1, 2, and 3:

        - @192 × 2 = 384@
        - @192 × 1 = 192@
        - @192 × 3 = 576@

    By concatenating each product we get the 1 to 9 pandigital, 192384576.

    We will call 192384576 the /concatenated product/ of 192 and (1, 2, 3).

    The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5).

    What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1, 2, ..., n) where n > 1?
-}
q038 :: IO Integer
q038 = pure . maximum . filter pandigital1 $ map catProd [1 .. 10_000]
  where
    catProd :: Integer -> Integer
    catProd n = undigits . take 9 $ concatMap (digits . (n *)) [1 .. 9]

{- |
    If p is the perimeter of a right angle triangle with integral length sides, {a, b, c}, there are exactly three solutions for p = 120:

        {20, 48, 52}, {24, 45, 51}, {30, 40, 50}.

    For which value of p <= 1000, is the number of solutions maximised?
-}
q039 :: IO Integer
q039 = pure . maybe 0 fst . maximumOn snd $ filter ((<= 1000) . fst) tris
  where
    tris :: [(Integer, Int)]
    tris = map (sum . head &&& length) . groupSortOn sum $ take 500 pythags

{- |
    An irrational decimal fraction is created by concatenating the positive integers:

        @0.12345678910(1)112131415161718192021...@

    It can be seen that the 12th digit of the fractional part is 1.

    If d(n) represents the nth digit of the fractional part, find the value of the following expression:

        @d(1) × d(10) × d(100) × d(1000) × d(10000) × d(100000) × d(1000000).@
-}
q040 :: IO Integer
q040 = pure $ productOn ((champernowne !!) . (10 ^)) [0 .. 6]
  where
    champernowne :: [Integer]
    champernowne = concatMap digits [0 ..]

{- |
    We shall say that an n-digit number is /pandigital/ if it makes use of all the digits 1 to n exactly once.

    For example, 2143 is a 4-digit pandigital and is also prime.

    What is the largest n-digit pandigital prime that exists?
-}
q041 :: IO Integer
q041 = pure . fromMaybe 0 . maximumWhen isPrime $ pandigitals1 7

-- ! cannot have 8 or 9 digits as (sum [1..8]) and (sum [1..9]) are divisible by 3

{- |
    The nth term of the sequence of triangle numbers is given by, t(n) = (1/2)n(n+1);
    so the first ten triangle numbers are:

        @1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...@

    By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t(10). If the word value is a triangle number then we shall call the word a /triangle word/.

    Using [.\/Inputs\/042.txt](file://./../Inputs/042.txt), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
-}
q042 :: IO Integer
q042 = fromIntegral . genericCount ((\n -> n `elem` takeWhile (<= n) triangles) . sumOn value) <$> in042
  where
    in042 :: IO [String]
    in042 = map (filter isAlpha) . lines <$> readFile "./Inputs/042.txt"

    value :: Char -> Integer
    value = fromIntegral . head . (`elemIndices` ('_' : ['A' .. 'Z']))

{- |
    The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.

    Let d(1) be the 1st digit, d(2) be the 2nd digit, and so on. In this way, we note the following:

        - @d(2)d(3)d(4)  = 406 is divisible by 2@
        - @d(3)d(4)d(5)  = 063 is divisible by 3@
        - @d(4)d(5)d(6)  = 635 is divisible by 5@
        - @d(5)d(6)d(7)  = 357 is divisible by 7@
        - @d(6)d(7)d(8)  = 572 is divisible by 11@
        - @d(7)d(8)d(9)  = 728 is divisible by 13@
        - @d(8)d(9)d(10) = 289 is divisible by 17@

    Find the sum of all 0 to 9 pandigital numbers with this property.
-}
q043 :: IO Integer
q043 = pure . sumWhen (and . (map test [1 .. 7] <*>) . pure) $ pandigitals0 9
  where
    test :: Integer -> Integer -> Bool
    test k n = (primes !! fromIntegral (k - 1) `elem`) . primeFactors . undigits . genericTake 3 . genericDrop k $ digits n

{- |
    Pentagonal numbers are generated by the formula, Pn = n(3n−1)/2. The first ten pentagonal numbers are:

        @1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...@

    It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and difference are pentagonal and D = |P(k) − P(j)| is minimised. What is the value of D?
-}
q044 :: IO Integer
q044 = pure $ uncurry (-) firstPentPair
  where
    isPentagonal :: Integer -> Bool
    isPentagonal x =
        let q = (sqrt (24 * fromIntegral x + 1) + 1) / 6 :: Double
         in floor q == ceiling q

    firstPentPair :: (Integer, Integer)
    firstPentPair = pentFinder 2 1
      where
        pentFinder j k =
            let n = j * (3 * j - 1) `div` 2
                m = k * (3 * k - 1) `div` 2
             in if
                        | isPentagonal (n - m) && isPentagonal (n + m) -> (n, m)
                        | j == k -> pentFinder (j + 1) 1
                        | otherwise -> pentFinder j (k + 1)

{- |
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

        @Triangle     T(n) = n(n+1)/2     1, 3,  6, 10, 15, ...@

        @Pentagonal   P(n) = n(3n−1)/2    1, 5, 12, 22, 35, ...@

        @Hexagonal    H(n) = n(2n−1)      1, 6, 15, 28, 45, ...@

    It can be verified that T(285) = P(165) = H(143) = 40755.

    Find the next triangle number that is also pentagonal and hexagonal.
-}
q045 :: IO Integer
q045 = pure $ filter isPentagonal hexagons !! 2
  where
    -- ! all hexagonal numbers are triangular!
    isPentagonal :: Integer -> Bool
    isPentagonal x =
        let q = (sqrt (24 * fromIntegral x + 1) + 1) / 6 :: Double
         in floor q == ceiling q

{- |
    It was proposed by Christian Goldbach that every odd composite number
    can be written as the sum of a prime and twice a square.

        -  9 =  7 + 2×1²
        - 15 =  7 + 2×2²
        - 21 =  3 + 2×3²
        - 25 =  7 + 2×3²
        - 27 = 19 + 2×2²
        - 33 = 31 + 2×1²

    It turns out that the conjecture was false.

    What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
-}
q046 :: IO Integer
q046 = pure . fromMaybe 0 $ find (nonGoldbach &^& (not . isPrime)) [3, 5 .. 10_001]
  where
    nonGoldbach :: Integer -> Bool
    nonGoldbach n = null [a + 2 * b | a <- takeWhile (< n) primes, b <- takeWhile (<= n `div` 2) squares, n == a + 2 * b]

{- |
    The first two consecutive numbers to have two distinct prime factors are:

        - 14 = 2  × 7
        - 15 = 3  × 5

    The first three consecutive numbers to have three distinct prime factors are:

        - 644 = 2² ×  7 × 23
        - 645 = 3  ×  5 × 43
        - 646 = 2  × 17 × 19

    Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?
-}
q047 :: IO Integer
q047 = pure $ firstOfFourConsecutive fourDistinctFactors [100_000 ..]
  where
    fourDistinctFactors :: Integer -> Bool
    fourDistinctFactors = (>= 4) . length . distinctPrimeFactors

    firstOfFourConsecutive :: (a -> Bool) -> [a] -> a
    firstOfFourConsecutive b (x : y : z : w : rest)
        | all b [x, y, z, w] = x
        | otherwise = firstOfFourConsecutive b (y : z : w : rest)
    firstOfFourConsecutive _ _ = error "none found"

{- |
    The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.

    Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
-}
q048 :: IO Integer
q048 = pure . undigits . reverse . take 10 . reverse . digits $ sumOn (\n -> n ^ n) [1 .. 1000]

{- |
    The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways:

        (1) each of the three terms are prime, and,
        (2) each of the 4-digit numbers are permutations of one another.

    There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.

    What 12-digit number do you form by concatenating the three terms in this sequence?
-}
q049 :: IO Integer
q049 = pure . read . concatMap show . head . Set.toList . Set.fromList . concat . filter (not . null) $ map ((filter arith . subsOfLength3) . Set.toList . Set.fromList . (`getPermsIn` fourDigitPrimes)) fourDigitPrimes
  where
    fourDigitPrimes :: [Integer]
    fourDigitPrimes = takeWhile (< 10_000) $ dropWhile (< 1000) primes

    getPermsIn :: Integer -> [Integer] -> [Integer]
    n `getPermsIn` ns = filter ((`elem` permutations (digits n)) . digits) ns

    arith :: [Integer] -> Bool
    arith (x : y : xs) = arith' (y - x) (y : xs)
      where
        arith' n (w : z : zs) = z - w == n && arith' n (w : zs)
        arith' _ _ = True
    arith _ = True

    subsOfLength3 :: [a] -> [[a]]
    subsOfLength3 (x : y : z : xs) = [x, y, z] : subsOfLength3 (y : z : xs)
    subsOfLength3 _ = []

{- |
    The prime 41, can be written as the sum of six consecutive primes:

        @41 = 2 + 3 + 5 + 7 + 11 + 13@

    This is the longest sum of consecutive primes that adds to a prime below one-hundred.

    The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.

    Which prime, below one-million, can be written as the sum of the most consecutive primes?
-}
q050 :: IO Integer
q050 =
    pure . maybe 0 thd3 . maximumOn snd3
        . take 10 -- the longest chain likely starts from one of the smallest primes!
        $ mapMaybe safeLast consecutivePrimeSums
  where
    consecutivePrimeSums :: [[(Integer, Integer, Integer)]]
    consecutivePrimeSums = groupOn fst3 $ consecutivePrimeSums' 0 1
      where
        consecutivePrimeSums' n k =
            if primes !! max 0 n > 1_000_000
                then []
                else
                    let m = sum (take k $ drop n primes)
                     in if
                                | m <= 1_000_000 && isPrime m ->
                                    (primes !! n, fromIntegral k, m) : consecutivePrimeSums' n (k + 1)
                                | m <= 1_000_000 -> consecutivePrimeSums' n (k + 1)
                                | otherwise -> consecutivePrimeSums' (n + 1) 1

{- |
    By replacing the first digit of the 2-digit number #3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

    By replacing the 3rd and 4th digits of 56##3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family:

        @56003, 56113, 56333, 56443, 56663, 56773, 56993@

    Consequently 56003, being the first member of this family, is the smallest prime with this property.

    Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.
-}
q051 :: IO Integer
q051 = pure . fromMaybe 0 $ find (\n -> (>= 8) . length . filter isPrime . replaceDigits n $ threeSamePositions n) searchSpace
  where
    searchSpace :: [Integer]
    searchSpace = filter threeSameNotLast sixDigitPrimes

    replaceDigits :: Integer -> [Integer] -> [Integer]
    replaceDigits n ks
        | any (> genericLength (digits n)) ks = []
        | 0 `elem` ks = replaceDigits' n ks [1 .. 9]
        | otherwise = replaceDigits' n ks [0 .. 9]
      where
        replaceDigits' :: Integer -> [Integer] -> [Integer] -> [Integer]
        replaceDigits' m js ls =
            let m' = Vector.fromList (digits m)
             in map (undigits . toList . (m' Vector.//)) . groupSortOn snd $ (,) <$> map fromIntegral js <*> ls

    sixDigitPrimes :: [Integer]
    sixDigitPrimes = takeWhile (< 1_000_000) $ dropWhile (< 100_000) primes

    threeSameNotLast :: Integer -> Bool
    threeSameNotLast n = let k = last (digits n) in any ((>= 3) . length) . filter (any (/= k)) . groupSort $ digits n

    threeSamePositions :: Integer -> [Integer]
    threeSamePositions n
        | threeSameNotLast n = let k = head . head . filter ((>= 3) . length) . group . sort $ digits n in map fromIntegral $ elemIndices k (digits n)
        | otherwise = []

{- |
    It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.

    Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
-}
q052 :: IO Integer
q052 = pure . fromMaybe 0 $ find test [100_000 .. 999_999]
  where
    test :: Integer -> Bool
    test n =
        let ns = sort (digits n)
            ns2 = sort (digits $ 2 * n)
            ns3 = sort (digits $ 3 * n)
            ns4 = sort (digits $ 4 * n)
            ns5 = sort (digits $ 5 * n)
            ns6 = sort (digits $ 6 * n)
         in all (ns ==) [ns2, ns3, ns4, ns5, ns6]

{- |
    There are exactly ten ways of selecting three from five, 12345:

        @123, 124, 125, 134, 135, 145, 234, 235, 245, 345@

    In combinatorics, we use the notation, (5 : 3) = 10.

    In general, (n : r) = n! \/ r!(n−r)!, where r <= n, n! = n × (n−1) × ... × 3 × 2 × 1, and 0! = 1.

    It is not until n = 23, that a value exceeds one-million: (23 : 10) = 1144066.

    How many, not necessarily distinct, values of (n, r) for 1 <= n <= 100, are greater than one-million?
-}
q053 :: IO Integer
q053 = pure $ genericLength [(n, r) | n <- [1 .. 100], r <- [0 .. n], n `choose` r > 1_000_000]

{- |
    In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:

        - High Card: Highest value card.
        - One Pair: Two cards of the same value.
        - Two Pairs: Two different pairs.
        - Three of a Kind: Three cards of the same value.
        - Straight: All cards are consecutive values.
        - Flush: All cards of the same suit.
        - Full House: Three of a kind and a pair.
        - Four of a Kind: Four cards of the same value.
        - Straight Flush: All cards are consecutive values of same suit.
        - Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.

    The cards are valued in the order:

        2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.

    If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared; if the highest cards tie then the next highest cards are compared, and so on.

    The file, [.\/Inputs\/054.txt](file://./../Inputs/054.txt), contains one-thousand random hands dealt to two players.

    Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards.

    You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner. How many hands does Player 1 win?
-}
q054 :: IO Integer
q054 = genericCount (uncurry (>)) <$> in054 -- ! declared in Poker.hs

{- |
    If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.

    Not all numbers produce palindromes so quickly. For example,

        -  349 +  943 = 1292
        - 1292 + 2921 = 4213
        - 4213 + 3124 = 7337

    That is, 349 took three iterations to arrive at a palindrome.

    Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse-and-add process is called a /Lychrel number/.

    Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either

        (1) become a palindrome in less than fifty iterations, or,
        (2) no one, with all the computing power that exists, has managed so far to map it to a palindrome.

    In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome:

        4668731596684224866951378664 (53 iterations, 28-digits).

    Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.

    How many Lychrel numbers are there below ten-thousand?
-}
q055 :: IO Integer
q055 = pure $ genericCount lychrel [1 .. 10_000]
  where
    lychrel :: Integer -> Bool
    lychrel = none palindrome . take 50 . drop 1 . iterate ((+) <*> backward)

{- |
    A googol (10^100) is a massive number: one followed by one-hundred zeros; 100^100 is almost unimaginably large: one followed by two-hundred zeros.

    Despite their size, the sum of the digits in each number is only 1.

    Considering natural numbers of the form a^b, where a, b < 100, what is the maximum digital sum?
-}
q056 :: IO Integer
q056 = pure . fromMaybe 0 $ maximumOf sum [digits (a ^ b) | a <- [1 .. 99], b <- [1 .. 99]]

{- |
    It is possible to show that the square root of two can be expressed as an infinite continued fraction.

        @√2 = 1 + 1\/(2 + 1\/(2 + 1\/(2 + ...)))@

    By expanding this for the first four iterations, we get:

        - @1 + 1\/2 = 3\/2 = 1.5@
        - @1 + 1\/(2 + 1\/2) = 7\/5 = 1.4@
        - @1 + 1\/(2 + 1\/(2 + 1\/2)) = 17\/12 = 1.41666...@
        - @1 + 1\/(2 + 1\/(2 + 1\/(2 + 1\/2))) = 41\/29 = 1.41379...@

    The next three expansions are 99\/70, 239\/169, and 577\/408, but the eighth expansion, 1393\/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator. In the first one-thousand expansions, how many fractions contain a numerator with more digits than the denominator?
-}
q057 :: IO Integer
q057 = pure . genericCount (\(n :% d) -> length (digits n) > length (digits d)) . take 1000 . drop 1 $ cfConvergents (1 : repeat 2)

{- |
    Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.

        @(37) 36  35  34  33  32 (31)@

        @ 38 (17) 16  15  14 (13) 30@

        @ 39  18  (5)  4  (3) 12  29@

        @ 40  19   6   1   2  11  28@

        @ 41  20  (7)  8   9  10  27@

        @ 42  21  22  23  24  25  26@

        @(43) 44  45  46  47  48  49@

    It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8\/13 ~= 62%.

    If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?
-}
q058 :: IO Integer
q058 = pure . primeRatioSideLength 0 1 . tail $ spiralDiagonals 30_001
  where
    primeRatioSideLength :: Integer -> Integer -> [Integer] -> Integer
    primeRatioSideLength !ps !a (x : y : z : w : xs) =
        let p = genericCount isPrime [x, y, z, w]
         in if (ps + p) % (a + 4) < 1 % 10
                then (a + 5) `div` 2
                else primeRatioSideLength (ps + p) (a + 4) xs
    primeRatioSideLength ps a _ = if ps % a < 1 % 10 then a else 0

{- |
    Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example,

        uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.

    A modern encryption method is to take a text file, convert the bytes to ASCII, then 'XOR' each byte with a given value, taken from a secret key. The advantage with the 'XOR' function is that using the same encryption key on the cipher text, restores the plain text; for example,
            65 'XOR' 42 = 107, then 107 'XOR' 42 = 65.

    For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both "halves", it is impossible to decrypt the message. Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key.

    If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.

    Your task has been made easy, as the encryption key consists of three lower case characters. Using [.\/Inputs\/059.txt](file://./../Inputs/059.txt), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.
-}
q059 :: IO Integer
q059 = do
    input <- in059
    pure . fromIntegral . maybe 0 (sumOn ord) . find (" the " `isInfixOf`) $ map (map (chr . fromIntegral) . zipWith xor input . cycle) threeLetters
  where
    in059 :: IO [Integer]
    in059 = map read . lines <$> readFile "./Inputs/059.txt"

    threeLetters :: [[Integer]]
    threeLetters = (\x y z -> map fromIntegral [ord x, ord y, ord z]) <$> ['a' .. 'z'] <*> ['a' .. 'z'] <*> ['a' .. 'z']

{- |
    The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime.

    For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.

    Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.
-}
q060 :: IO Integer
q060 = pure . fromMaybe 0 $ minimumOf sum fiveConcatenablePrimes
  where
    primeBound :: [Integer]
    primeBound = takeWhile (<= 10_000) primes

    fiveConcatenablePrimes :: [[Integer]]
    fiveConcatenablePrimes =
        [ [a, b, c, d, e]
        | a <- reverse primeBound
        , b <- dropWhile (<= a) primeBound
        , concatenablePrime [a] b
        , c <- dropWhile (<= b) primeBound
        , concatenablePrime [a, b] c
        , d <- dropWhile (<= c) primeBound
        , concatenablePrime [a, b, c] d
        , e <- dropWhile (<= d) primeBound
        , concatenablePrime [a, b, c, d] e
        ]

    concatenablePrime :: [Integer] -> Integer -> Bool
    concatenablePrime xs n = all isPrime $ [catLeft n, catRight n] <*> xs

    catLeft, catRight :: Integer -> Integer -> Integer
    catLeft n k = undigits $ digits n ++ digits k
    catRight = flip catLeft

{- |
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

        @Triangle       P(3, n) = n(n + 1)/2      1, 3,  6, 10, 15, ...@

        @Square         P(4, n) = n²              1, 4,  9, 16, 25, ...@

        @Pentagonal     P(5, n) = n(3n − 1)/2     1, 5, 12, 22, 35, ...@

        @Hexagonal      P(6, n) = n(2n − 1)       1, 6, 15, 28, 45, ...@

        @Heptagonal     P(7, n) = n(5n − 3)/2     1, 7, 18, 34, 55, ...@

        @Octagonal      P(8, n) = n(3n − 2)       1, 8, 21, 40, 65, ...@

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        (1) The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
        (2) Each polygonal type: triangle (P(3, 127) = 8128), square (P(4, 91) = 8281), and pentagonal (P(5, 44) = 2882), is represented by a different number in the set.
        (3) This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
-}
q061 :: IO Integer
q061 = pure . sum . head . Set.toList . Set.fromList . filter cyclic . map (map snd) . concatMap ((`picks` searchSpace) . pure) $ Map.keys searchSpace
  where
    match :: Integer -> Integer -> Bool
    match n m = drop 2 (digits n) == take 2 (digits m)

    fourDigitNgons :: Integer -> [Integer]
    fourDigitNgons = takeWhile (<= 10_000) . dropWhile (< 1000) . ngons

    matches :: (Integer, Integer) -> Map (Integer, Integer) [(Integer, Integer)]
    matches (k, val)
        | k `elem` [3 .. 8] = Map.singleton (k, val) . concatMap (filter (match val . snd) . (\n -> map (n,) $ fourDigitNgons n)) $ delete k [3 .. 8]
        | otherwise = Map.empty

    cyclic :: [Integer] -> Bool
    cyclic xs = length xs == 6 && any (pairwiseSequential match) (permutations xs)

    searchSpace :: Map (Integer, Integer) [(Integer, Integer)]
    searchSpace =
        runIdentity
            . Map.traverseMaybeWithKey
                ( \k vs ->
                    Identity $
                        if 0 `elem` digits (snd k) || null vs
                            then Nothing
                            else
                                let vs' = filter ((/= 0) . (!! 2) . digits . snd) vs
                                 in if null vs' then Nothing else Just vs'
                )
            . Map.unions
            $ concatMap (\n -> map (matches . (n,)) (fourDigitNgons n)) [3 .. 8]

    picks :: [(Integer, Integer)] -> Map (Integer, Integer) [(Integer, Integer)] -> [[(Integer, Integer)]]
    picks [] _ = []
    picks xs _ | length xs == 6 = [xs]
    picks xs@(x : _) m =
        let vs = filter ((`notElem` map fst xs) . fst) . fromMaybe [] $ m Map.!? x
         in concatMap ((`picks` m) . (: xs)) vs

{- |
    The cube, 41063625 (345^3), can be permuted to produce two other cubes: 56623104 (384^3) and 66430125 (405^3). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.

    Find the smallest cube for which exactly five permutations of its digits are cube.
-}
q062 :: IO Integer
q062 = pure . maybe 0 (^ 3) . minimumOf fst . Map.elems $ Map.filter ((== 5) . snd) cubesByLargestPerm
  where
    biggestCubePerm :: Integer -> Integer
    biggestCubePerm = undigits . sortOn Down . digits . (^ 3)

    cubesByLargestPerm :: Map Integer (Integer, Integer)
    cubesByLargestPerm = foldl' (\m (k, v) -> Map.insertWith (const $ second succ) k v m) Map.empty [(biggestCubePerm n, (n, 1)) | n <- [345 .. 10_000]]

{- |
    The 5-digit number, 16807 = 7^5, is also a fifth power. Similarly, the 9-digit number, 134217728 = 8^9, is a ninth power.

    How many n-digit positive integers exist which are also an nth power?
-}
q063 :: IO Integer
q063 = pure . genericCount (\(a, b) -> genericLength (digits $ a ^ b) == b) $ (,) <$> [1 .. 9] <*> [1 .. 21]

{- |
    All square roots are periodic when written as continued fractions and can be written in the form:

        @√N = a0 + 1 \/ (a1 + 1 \/ (a2 + 1 \/ (a3 + ...)))@

    For example, let us consider √23:

        @√23 = 4 + √23 − 4 = 4 + 1 \/ (1 \/ (√23 - 4)) = 4 + 1 \/ (1 + (√23 - 3) \/ 7)@

    If we continue we would get the following expansion:

        @√23 = 4 + 1 \/ (1 + 1 \/ (3 + 1 \/ (1 + 1 \/ (8 + ...))))@

    The process can be summarised as follows:

        - @a0 = 4, 1 \/ (√23 - 4) = (√23 + 4) \/ 7 = 1 + ((√23 − 3) \/ 7)@
        - @a1 = 1, 7 \/ (√23 − 3) = 7(√23 + 3) \/ 14 = 3 + ((√23 − 3) \/ 2)@
        - @a2 = 3, 2 \/ (√23 − 3) = 2(√23 + 3) \/ 14 = 1 + ((√23 − 4) \/ 7)@
        - @a3 = 1, 7 \/ (√23 − 4) = 7(√23 + 4) \/ 7 = 8 + √23 − 4@
        - @a4 = 8, 1 \/ (√23 - 4) = (√23 + 4) \/ 7 = 1 + ((√23 − 3) \/ 7)@
        - @a5 = 1, 7 \/ (√23 − 3) = 7(√23 + 3) \/ 14 = 3 + ((√23 − 3) \/ 2)@
        - @a6 = 3, 2 \/ (√23 − 3) = 2(√23 + 3) \/ 14 = 1 + ((√23 − 4) \/ 7)@
        - @a7 = 1, 7 \/ (√23 − 4) = 7(√23 + 4) \/ 7 = 8 + √23 − 4@

    It can be seen that the sequence is repeating. For conciseness, we use the notation √23 = [4;(1, 3, 1, 8)], to indicate that the block (1, 3, 1, 8) repeats indefinitely.

    The first ten continued fraction representations of (irrational) square roots are:

        - @√2  = [1; (2)],             period = 1@
        - @√3  = [1; (1, 2)],          period = 2@
        - @√5  = [2; (4)],             period = 1@
        - @√6  = [2; (2, 4)],          period = 2@
        - @√7  = [2; (1, 1, 1, 4)],    period = 4@
        - @√8  = [2; (1, 4)],          period = 2@
        - @√10 = [3; (6)],             period = 1@
        - @√11 = [3; (3, 6)],          period = 2@
        - @√12 = [3; (2, 6)],          period = 2@
        - @√13 = [3; (1, 1, 1, 1, 6)], period = 5@

    Exactly four continued fractions, for N <= 13, have an odd period.

    How many continued fractions for N <= 10000 have an odd period?
-}
q064 :: IO Integer
q064 = genericCount odd <$> in064
  where
    in064 :: IO [Integer]
    in064 = map (read . takeWhileEnd (not . isSpace)) . tail . lines <$> readFile "./Inputs/064.txt"

{- |
    The square root of 2 can be written as an infinite continued fraction.

        @√2 = 1 + 1\/(2 + 1\/(2 + 1\/(2 + ...)))@

    The infinite continued fraction can be written, √2 = [1; (2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4; (1, 3, 1, 8)].

    It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for √2.

        - @1 + 1\/2                     = 3\/2@
        - @1 + 1 \/ (2 + 1/2)           = 7\/5@
        - @1 + 1 \/ (2 + 1 / (2 + 1/2)) = 17\/12@

    Hence the sequence of the first ten convergents for √2 are:

        @1, 3\/2, 7\/5, 17\/12, 41\/29, 99\/70, 239\/169, 577\/408, 1393\/985, 3363\/2378@

    What is most surprising is that the important mathematical constant,

        @e = [2; 1, 2, 1, 1, 4, 1,..., 1, 2k, 1,...]@

    The first ten terms in the sequence of convergents for e are:

        @2, 3, 8\/3, 11\/4, 19\/7, 87\/32, 106\/39, 193\/71, 1264\/465, 1457\/536@

    The sum of digits in the numerator of the 10th convergent is 1 + 4 + 5 + 7 = 17.

    Find the sum of digits in the numerator of the 100th convergent of the continued fraction for e.
-}
q065 :: IO Integer
q065 = pure . sum . digits . numerator $ cfConvergents (2 : concat [[1, 2 * k, 1] | k <- [1 ..]]) !! 99

{- |
    Consider quadratic Diophantine equations of the form:

        x² – Dy² = 1

    For example, when D = 13, the minimal solution in x is 649² - 13×180² = 1. It can be assumed that there are no solutions in positive integers when D is square.

    By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:

        - 3² – 2×2² = 1
        - 2² – 3×1² = 1
        - 9² – 5×4² = 1
        - 5² – 6×2² = 1
        - 8² – 7×3² = 1

    Hence, by considering minimal solutions in x for D <= 7, the largest x is obtained when D = 5.

    Find the value of D <= 1000 in minimal solutions of x for which the largest value of x is obtained.
-}
q066 :: IO Integer
q066 = pure . maybe 0 fst3 . maximumOn snd3 $ mapMaybe pellSolution [1 .. 1000]
  where
    pellSolution :: Integer -> Maybe (Integer, Integer, Integer)
    pellSolution n = listToMaybe [(n, x, y) | (x :% y) <- cfConvergents $ getCF (sqrt (fromIntegral n) :: BigFloat Prec500), x ^ 2 == 1 + n * y ^ 2]

{- |
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

        @  (3)  @

        @ (7)4  @

        @ 2(4)6 @

        @8 5(9)3@

    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom in [.\/Inputs\/067.txt](file://./../Inputs/067.txt), a 15K text file containing a triangle with one-hundred rows.
-}
q067 :: IO Integer
q067 = head . foldr1 algo <$> in067
  where
    in067 :: IO [[Integer]]
    in067 = map (map read . words) . lines <$> readFile "./Inputs/067.txt"

    algo :: [Integer] -> [Integer] -> [Integer]
    algo (x : xs) (y : z : ys) = max (x + y) (x + z) : algo xs (z : ys)
    algo _ _ = []

{- |
    Consider the "magic" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.

    Working clockwise, and starting from the group of three with the numerically lowest external node (4, 3, 2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4, 3, 2; 6, 2, 1; 5, 1, 3.

    It is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.

        @Total   Solution Set@

        @9       4, 2, 3; 5, 3, 1; 6, 1, 2@

        @9       4, 3, 2; 6, 2, 1; 5, 1, 3@

        @10      2, 3, 5; 4, 5, 1; 6, 1, 3@

        @10      2, 5, 3; 6, 3, 1; 4, 1, 5@

        @11      1, 4, 6; 3, 6, 2; 5, 2, 4@

        @11      1, 6, 4; 5, 4, 2; 3, 2, 6@

        @12      1, 5, 6; 2, 6, 4; 3, 4, 5@

        @12      1, 6, 5; 3, 5, 4; 2, 4, 6@

    By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.

    Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum 16-digit string for a "magic" 5-gon ring?
-}
q068 :: IO Integer
q068 = pure . fromMaybe 0 . maximumOf resultString $ filter (sumsEqual &^& lexOrder &^& noMiddleTens) fiveGons
  where
    sumsEqual :: Vector Integer -> Bool
    sumsEqual xs = allSame $ map (sum . (<*> [xs])) [[(! 0), (! 1), (! 2)], [(! 3), (! 2), (! 4)], [(! 5), (! 4), (! 6)], [(! 7), (! 6), (! 8)], [(! 9), (! 8), (! 1)]]

    lexOrder :: Vector Integer -> Bool
    lexOrder xs = all (((xs ! 0) <=) . (xs !)) [3, 5, 7, 9]

    -- to guarantee 16-digit strings
    noMiddleTens :: Vector Integer -> Bool
    noMiddleTens = notElem 10 . ([(! 1), (! 2), (! 4), (! 6), (! 8)] <*>) . pure

    resultString :: Vector Integer -> Integer
    resultString xs = undigits $ map (xs !) [0, 1, 2, 3, 2, 4, 5, 4, 6, 7, 6, 8, 9, 8, 1]

    fiveGons :: [Vector Integer]
    fiveGons = map Vector.fromList $ permutations [1 .. 10]

{- |
    Euler's Totient function, φ(n), is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9) = 6.

        @n     Relatively Prime   φ(n)    n/φ(n)@

        @2     1                  1       2@

        @3     1, 2               2       1.5@

        @4     1, 3               2       2@

        @5     1, 2, 3, 4         4       1.25@

        @6     1, 5               2       3@

        @7     1, 2, 3, 4, 5, 6   6       1.1666...@

        @8     1, 3, 5, 7         4       2@

        @9     1, 2, 4, 5, 7, 8   6       1.5@

        @10    1, 3, 7, 9         4       2.5@

    It can be seen that n = 6 produces a maximum n\/φ(n) for n <= 10.

    Find the value of n <= 1000000 for which n\/φ(n) is a maximum.
-}
q069 :: IO Integer
q069 = pure . fromMaybe 0 $ maximumOn (((/) `using` fromIntegral) <$> id <*> totient) [1 .. 1_000_000]

{- |
    Euler's Totient function, φ(n), is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9) = 6.

    The number 1 is considered to be relatively prime to every positive number, so φ(1) = 1.

    Interestingly, φ(87109) = 79180, and it can be seen that 87109 is a permutation of 79180.

    Find the value of n, 1 < n < 10^7, for which φ(n) is a permutation of n and the ratio n\/φ(n) produces a minimum.
-}
q070 :: IO Integer
q070 = pure . maybe 0 fst $ minimumOn (uncurry ((/) `using` fromIntegral)) [(x, totient x) | x <- [2 .. 10 ^ 7 - 1], sort (show $ totient x) == sort (show x)]

{- |
    Consider the fraction, n\/d, where n and d are positive integers. If n < d and gcd(n, d) = 1, it is called a reduced proper fraction.

    If we list the set of reduced proper fractions for d <= 8 in ascending order of size, we get:

    @1\/8, 1\/7, 1\/6, 1\/5, 1\/4, 2\/7, 1\/3, 3\/8, 2\/5, 3\/7, 1\/2, 4\/7, 3\/5, 5\/8, 2\/3, 5\/7, 3\/4, 4\/5, 5\/6, 6\/7, 7\/8@

    It can be seen that 2\/5 is the fraction immediately to the left of 3\/7.

    By listing the set of reduced proper fractions for d <= 1000000 in ascending order of size, find the numerator of the fraction immediately to the left of 3\/7.
-}
q071 :: IO Integer
q071 = pure . numerator $ mediant 0 1 (3 % 7) 1_000_000
  where
    mediant :: Rational -> Rational -> Rational -> Integer -> Rational
    mediant (a :% b) (c :% d) comp limit =
        let m = (a + c) % (b + d)
         in if
                    | b + d >= limit -> m
                    | c % d == comp ->
                        let diff = limit - (b + d)
                            rept = 1 + (diff `div` d)
                         in (a + rept * c) % (b + rept * d)
                    | otherwise -> case compare m comp of
                        LT -> mediant m (c % d) comp limit
                        _ -> mediant (a % b) m comp limit

{- |
    Consider the fraction, n\/d, where n and d are positive integers. If n < d and gcd(n, d) = 1, it is called a reduced proper fraction.

    If we list the set of reduced proper fractions for d <= 8 in ascending order of size, we get:

    @1\/8, 1\/7, 1/\6, 1\/5, 1\/4, 2\/7, 1\/3, 3\/8, 2\/5, 3\/7, 1\/2, 4\/7, 3\/5, 5\/8, 2\/3, 5\/7, 3\/4, 4\/5, 5\/6, 6\/7, 7\/8@

    It can be seen that there are 21 elements in this set.

    How many elements would be contained in the set of reduced proper fractions for d <= 1000000?
-}
q072 :: IO Integer
q072 = pure $ sumOn totient [2 .. 1_000_000]

{- |
    Consider the fraction, n\/d, where n and d are positive integers. If n < d and gcd(n, d) = 1, it is called a reduced proper fraction.

    If we list the set of reduced proper fractions for d <= 8 in ascending order of size, we get:

    @1\/8, 1\/7, 1\/6, 1\/5, 1\/4, 2\/7, 1\/3, 3\/8, 2\/5, 3\/7, 1\/2, 4\/7, 3\/5, 5\/8, 2\/3, 5\/7, 3\/4, 4\/5, 5\/6, 6\/7, 7\/8@

    It can be seen that there are 3 fractions between 1\/3 and 1\/2.

    How many fractions lie between 1\/3 and 1\/2 in the sorted set of reduced proper fractions for d <= 12000?
-}
q073 :: IO Integer
q073 = pure $ numFracs 3 2 12_000
  where
    numFracs :: Integer -> Integer -> Integer -> Integer
    numFracs minD maxD limit =
        let medD = minD + maxD
         in if medD > limit
                then 0
                else 1 + numFracs minD medD limit + numFracs medD maxD limit

{- |
    The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:

        1! + 4! + 5! = 1 + 24 + 120 = 145

    Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:

        - @169 -> 363601 -> 1454 -> 169@
        - @871 -> 45361 -> 871@
        - @872 -> 45362 -> 872@

    It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,

        - @69 -> 363600 -> 1454 -> 169 -> 363601 (-> 1454)@
        - @78 -> 45360 -> 871 -> 45361 (-> 871)@
        - @540 -> 145 (-> 145)@

    Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.

    How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?
-}
q074 :: IO Integer
q074 = pure $ genericCount ((== 60) . factSumChainLength) [0 .. 999_999]
  where
    factSum :: Integer -> Integer
    factSum = sum . map factorial . digits

    factSumChainLength :: Integer -> Integer
    factSumChainLength = genericLength . takeWhileUniqueOrd . iterate' factSum

{- |
    It turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples.

        - 12 cm: (3, 4, 5)
        - 24 cm: (6, 8, 10)
        - 30 cm: (5, 12, 13)
        - 36 cm: (9, 12, 15)
        - 40 cm: (8, 15, 17)
        - 48 cm: (12, 16, 20)

    In contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles.

        - 120 cm: (30, 40, 50), (20, 48, 52), (24, 45, 51)

    Given that L is the length of the wire, for how many values of L <= 1500000 can exactly one integer sided right angle triangle be formed?
-}
q075 :: IO Integer
q075 = pure . genericCount ((<= 1_500_000) . sum) $ pythagsHypOptimized 1_500_000
  where
    primPythagsOptimized :: [[V3 Integer]] -> [[V3 Integer]]
    primPythagsOptimized vss@(vs : _) =
        case filter ((<= 1_500_000) . sum) (concatMap children vs) of
            [] -> vss
            ws -> primPythagsOptimized (sortOn (^. _z) ws : vss)
    primPythagsOptimized [] = []

    pythagsHypOptimized :: Integer -> [V3 Integer]
    pythagsHypOptimized l =
        let ps = concat $ primPythagsOptimized [[V3 3 4 5]]
         in concatMap (map snd) . filter ((== 1) . length) . groupSortOn fst $ concatMap (\p@(V3 _ _ h) -> map ((sum &&& id) . (p ^*)) [1 .. (l `div` h) + 1]) ps

    a, b, c :: M33 Integer
    a = V3 (V3 1 (-2) 2) (V3 2 (-1) 2) (V3 2 (-2) 3)
    b = V3 (V3 1 2 2) (V3 2 1 2) (V3 2 2 3)
    c = V3 (V3 (-1) 2 2) (V3 (-2) 1 2) (V3 (-2) 2 3)

    children :: V3 Integer -> [V3 Integer]
    children = ((!*) <$> [a, b, c] <*>) . pure

{- |
    It is possible to write five as a sum in exactly six different ways:

        - 4 + 1
        - 3 + 2
        - 3 + 1 + 1
        - 2 + 2 + 1
        - 2 + 1 + 1 + 1
        - 1 + 1 + 1 + 1 + 1

    How many different ways can one hundred be written as a sum of at least two positive integers?
-}
q076 :: IO Integer
q076 = pure $ countPartitions 100 - 1

{- |
    It is possible to write ten as the sum of primes in exactly five different ways:

        - 7 + 3
        - 5 + 5
        - 5 + 3 + 2
        - 3 + 3 + 2 + 2
        - 2 + 2 + 2 + 2 + 2

    What is the first value which can be written as the sum of primes in over five thousand different ways?
-}
q077 :: IO Integer
q077 = pure . maybe 0 fromIntegral $ find ((>= 5000) . count primePartition . partitions) [1 ..]
  where
    primePartition :: Partition -> Bool
    primePartition = all (isPrime . fromIntegral) . fromPartition

{- |
    Let p(n) represent the number of different ways in which n coins can be separated into piles.

    For example, five coins can be separated into piles in exactly seven different ways, so p(5)=7.

        - OOOOO
        - OOOO  O
        - OOO   OO
        - OOO   O    O
        - OO    OO   O
        - OO    O    O    O
        - O     O    O    O    O

    Find the least value of n for which p(n) is divisible by one million.
-}
q078 :: IO Integer
q078 = pure . maybe 0 fromIntegral $ find (((>= 1_000_000) &^& ((== 0) . (`mod` 1_000_000))) . countPartitions) [1 ..]

{- |
    A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.

    The text file, [.\/Inputs\/079.txt](file://./../Inputs/079.txt), contains fifty successful login attempts.

    Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.
-}
q079 :: IO Integer
q079 = code [] <$> in079
  where
    in079 :: IO [[Integer]]
    in079 = map (digits . read) . lines <$> readFile "./Inputs/079.txt"

    middles :: [[Integer]] -> [Integer]
    middles = concatMap (\case (_ : y : _) -> [y]; _ -> [])

    firstDigit :: [[Integer]] -> Integer
    firstDigit ps = head . filter (`notElem` middles ps) $ concatMap (take 1) ps

    newPWs :: [[Integer]] -> [[Integer]]
    newPWs ps =
        let d = firstDigit ps
         in filter notNull $ map (\p -> if take 1 p == [d] then drop 1 p else p) ps

    code :: [Integer] -> [[Integer]] -> Integer
    code acc [] = undigits acc
    code acc ps = code (acc ++ [firstDigit ps]) (newPWs ps)

{- |
    It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.

    The square root of two is 1.41421356237309504880..., and the digital sum of the first one hundred decimal digits is 475.

    For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.
-}
q080 :: IO Integer
q080 = pure . sumOn (sum . first100 . sqrt') $ [1 .. 100] \\ takeWhile (<= 100) squares
  where
    sqrt' :: Integer -> BigFloat Prec500
    sqrt' = sqrt . fromIntegral

    first100 :: BigFloat Prec500 -> [Integer]
    first100 = take 100 . map (read . pure) . delete '.' . show

{- |
    In the 5 by 5 matrix below, the minimal path sum from the top left to the bottom right, by only moving to the right and down, is indicated in brackets and is equal to 2427.

        @[131] 673  234  103   18@

        @[201] [96][342] 965  150@

        @ 630  803 [746][422] 111@

        @ 537  699  497 [121] 956@

        @ 805  732  524  [37][331]@

    Find the minimal path sum from the top left to the bottom right by only moving right and down in [.\/Inputs\/081.txt](file://./../Inputs/081.txt), a 31K text file containing an 80 by 80 matrix.
-}
q081 :: IO Integer
q081 = pure 0
  where

-- matrix :: IO (Map (V2 Int) Integer)
-- matrix = twoDimListToMap read 0 0 Map.empty . map (splitOn (pure ',')) . lines <$> readFile "./Inputs/081.txt"

-- vectorChain :: V2 Int -> [V2 Int]
-- vectorChain = filter (all (>= 0)) . (subtract <$> [V2 1 0, V2 0 1] <*>) . pure

-- foldMatrix :: (V2 Int, Integer) -> Map (V2 Int) Integer -> Integer
-- foldMatrix (V2 0 0, s) m = s + m Map.! V2 0 0
-- foldMatrix (v, s) m =
--     let v' = fromMaybe 0 $ minimumOn (m Map.!) (vectorChain v)
--      in foldMatrix (v', s + m Map.! v) m

{- |
    Each of the six faces on a cube has a different digit (0 to 9) written on it; the same is done to a second cube. By placing the two cubes side-by-side in different positions we can form a variety of 2-digit numbers.

    In fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: 01, 04, 09, 16, 25, 36, 49, 64, and 81.

    For example, one way this can be achieved is by placing {0, 5, 6, 7, 8, 9} on one cube and {1, 2, 3, 4, 8, 9} on the other cube.

    However, for this problem we shall allow the 6 or 9 to be turned upside-down so that an arrangement like {0, 5, 6, 7, 8, 9} and {1, 2, 3, 4, 6, 7} allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain 09.

    In determining a distinct arrangement we are interested in the digits on each cube, not the order.

        - @{1, 2, 3, 4, 5, 6}@ is equivalent to @{3, 6, 4, 1, 2, 5}@
        - @{1, 2, 3, 4, 5, 6}@ is distinct from @{1, 2, 3, 4, 5, 9}@

    But because we are allowing 6 and 9 to be reversed, the two distinct sets in the last example both represent the extended set {1, 2, 3, 4, 5, 6, 9} for the purpose of forming 2-digit numbers.

    How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed?
-}
q090 :: IO Integer
q090 = pure . genericLength . Set.fromList . map (\(xs, ys) -> sort [xs, ys]) $ [(xs, ys) | xs <- sixDigitLists, ys <- sixDigitLists, (makesAllSquares `using` represented) xs ys]
  where
    represented :: [Integer] -> [Integer]
    represented xs
        | 6 `elem` xs = Set.toList . Set.fromList $ 9 : xs
        | 9 `elem` xs = Set.toList . Set.fromList $ 6 : xs
        | otherwise = xs

    sixDigitLists :: [[Integer]]
    sixDigitLists = Set.toList . Set.fromList . filter ((== 6) . length) $ sublists [0 .. 9]

    makesAllSquares :: [Integer] -> [Integer] -> Bool
    makesAllSquares xs ys = and $ elem <$> [(0, 1), (0, 4), (0, 9), (1, 6), (2, 5), (3, 6), (4, 9), (6, 4), (8, 1)] <*> [((,) <$> xs <*> ys) ++ ((,) <$> ys <*> xs)]

{- |
    A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before. For example,

        - @44 -> 32 -> 13 -> 10 -> 1 -> 1@
        - @85 -> 89 -> 145 -> 42 -> 20 -> 4 -> 16 -> 37 -> 58 -> 89@

    Therefore any chain that arrives at 1 or 89 will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at 1 or 89.

    How many starting numbers below ten million will arrive at 89?
-}
q092 :: IO Integer
q092 = pure $ sumOn multinomial $ filter unhappy orderedSevens
  where
    multinomial :: Integer -> Integer
    multinomial = (div <$> factorial . genericLength <*> productOn (factorial . genericLength) . group) . (\xs@(length -> x) -> if x < 7 then replicate (7 - x) 0 ++ xs else xs) . sort . digits

    orderedSevens :: [Integer]
    orderedSevens =
        [ undigits [a, b, c, d, e, f, g]
        | a <- [0 .. 9]
        , b <- [a .. 9]
        , c <- [b .. 9]
        , d <- [c .. 9]
        , e <- [d .. 9]
        , f <- [e .. 9]
        , g <- [if maximum [a, b, c, d, e, f] /= 0 then f else 1 .. 9]
        ]

    unhappy :: Integer -> Bool
    unhappy = (firstSqSums !) . subtract 1 . fromIntegral . sqSum

    sqSum :: Integer -> Integer
    sqSum = sumOn (^ 2) . digits

    reaches89 :: Integer -> Bool
    reaches89 = ((> 1) &^& ((== 89) |^| reaches89)) . sqSum

    firstSqSums :: Vector Bool
    firstSqSums = Vector.fromList $ map reaches89 [1 .. 81 * 7 + 1]

{- |
    By using each of the digits from the set, {1, 2, 3, 4}, exactly once, and making use of the four arithmetic operations (+, −, *, /) and brackets/parentheses, it is possible to form different positive integer targets.

    For example,

        - @8 = (4 * (1 + 3)) / 2@
        - @14 = 4 * (3 + 1 / 2)@
        - @19 = 4 * (2 + 3) − 1@
        - @36 = 3 * 4 * (2 + 1)@

    Note that concatenations of the digits, like 12 + 34, are not allowed.

    Using the set, {1, 2, 3, 4}, it is possible to obtain thirty-one different target numbers of which 36 is the maximum, and each of the numbers 1 to 28 can be obtained before engenericCountering the first non-expressible number.

    Find the set of four distinct digits, a < b < c < d, for which the longest set of consecutive positive integers, 1 to n, can be obtained, giving your answer as a string: abcd.
-}
q093 :: IO Integer
q093 = pure 0

{- |
    Su Doku (Japanese, meaning "number place") is the name given to a popular puzzle concept. Its origin is unclear, but credit must be attributed to Leonhard Euler who invented a similar, and much more difficult, puzzle idea called Latin Squares. The objective of Su Doku puzzles, however, is to replace the blanks (or zeros) in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9.

    A well constructed Su Doku puzzle has a unique solution and can be solved by logic, although it may be necessary to employ "guess and test" methods in order to eliminate options (there is much contested opinion over this). The complexity of the search determines the difficulty of the puzzle; the example above is considered easy because it can be solved by straight forward direct deduction.

    The 6K text file, [.\/Inputs\/096.txt](file://./../Inputs/096.txt), contains fifty different Su Doku puzzles ranging in difficulty, but all with unique solutions (the first puzzle in the file is the example above).

    By solving all fifty puzzles find the sum of the 3-digit numbers found in the top left corner of each solution grid; for example, 483 is the 3-digit number found in the top left corner of the solution grid above.
-}
q096 :: IO Integer
q096 = sumOn (\m -> undigits $ map (fromIntegral . (m Map.!)) [V2 0 0, V2 0 1, V2 0 2]) . map (fromMaybe Map.empty . solve) <$> sudokus
  where
    sudokus :: IO [Sudoku]
    sudokus = map sudoku . chunksOf 9 . filter (all isDigit) . lines <$> readFile "./Inputs/096.txt"

{- |
    Comparing two numbers written in index form like 2^11 and 3^7 is not difficult, as any calculator would confirm that 2^11 = 2048 < 3^7 = 2187.

    However, confirming that 632382^518061 > 519432^525806 would be much more difficult, as both numbers contain over three million digits.

    Using [.\/Inputs\/099.txt](file://./../Inputs/099.txt), a 22K text file containing one thousand lines with a base/exponent pair on each line, determine which line number has the greatest numerical value.

    /NOTE: The first two lines in the file represent the numbers in the example given above./
-}
q099 :: IO Integer
q099 = fst . head . sortOn (Down . snd) . zip [1 ..] <$> in099
  where
    in099 :: IO [Double]
    in099 = map ((\[x, y] -> read y * log (read x)) . splitOn (pure ',')) . lines <$> readFile "./Inputs/099.txt"
