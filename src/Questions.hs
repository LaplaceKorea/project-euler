module Questions where

import           CalendarExtra
import           Control.Arrow
import           Control.Lens
import           Data.Array
import           Data.Bits
import           Data.Bits.Lens
import           Data.Char
import           Data.Foldable
import qualified Data.Map as M
import           Data.Map (Map)
import qualified Data.Set as S
import           Data.Set (Set)
import           Data.Word (Word32)
import           NumbersExtra
import           Poker
import           System.IO.Unsafe

q001 :: Integer
{-
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
-}
q001 = findSum 1000 where
    findSum :: Integer -> Integer
    findSum n = sum [ x | x <- [1..n-1], x `mod` 3 == 0 || x `mod` 5 == 0 ]

q002 :: Integer
{-
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
    --?     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
-}
q002 = sum . filter even $ takeWhile (< 4000000) fibonaccis

q003 :: Integer
{-
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
-}
q003 = maximum $ primeFactors 600851475143

q004 :: Integer
{-
    A palindromic number reads the same both ways. The largest palindrome
    made from the product of two 2-digit numbers is 9009 = 91 × 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
-}
q004 = head . filter palindrome $ (*) <$> [999,998..100] <*> [999,998..100]

q005 :: Integer
{-
    2520 is the smallest number that can be divided by each of
    the numbers from 1 to 10 without any remainder. What is the smallest
    positive number that is evenly divisible by all of the numbers from 1 to 20?
-}
q005 = foldr lcm 1 [2..20]

q006 :: Integer
{-
    The sum of the squares of the first ten natural numbers is,
    --?     1² + 2² + ... + 10² = 385
    The square of the sum of the first ten natural numbers is,
    --?     (1 + 2 + ... + 10)² = 55² = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
    --?     3025 − 385 = 2640.
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
-}
q006 = sum [1..100] ^ 2 - sum (take 100 squares)

q007 :: Integer
{-
    By listing the first six prime numbers:
    --?     2, 3, 5, 7, 11, and 13,
    we can see that the 6th prime is 13.
    What is the 10 001st prime number?
-}
q007 = primes !! 10000

q008 :: Integer
{-
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    --?     73167176531330624919225119674426574742355349194934
    --?     96983520312774506326239578318016984801869478851843
    --?     85861560789112949495459501737958331952853208805511
    --?     12540698747158523863050715693290963295227443043557
    --?     66896648950445244523161731856403098711121722383113
    --?     62229893423380308135336276614282806444486645238749
    --?     30358907296290491560440772390713810515859307960866
    --?     70172427121883998797908792274921901699720888093776
    --?     65727333001053367881220235421809751254540594752243
    --?     52584907711670556013604839586446706324415722155397
    --?     53697817977846174064955149290862569321978468622482
    --?     83972241375657056057490261407972968652414535100474
    --?     82166370484403199890008895243450658541227588666881
    --?     16427171479924442928230863465674813919123162824586
    --?     17866458359124566529476545682848912883142607690042
    --?     24219022671055626321111109370544217506941658960408
    --?     07198403850962455444362981230987879927244284909188
    --?     84580156166097919133875499200524063689912560717606
    --?     05886116467109405077541002256983155200055935729725
    --?     71636269561882670428252483600823257530420752963450
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
-}
q008 = maximum $ products in008 where
    products :: [Integer] -> [Integer]
    products [] = []
    products xs | length xs < 13 = []
                | otherwise      = product (take 13 xs) : products (tail xs)

    in008 :: [Integer]
    in008 = digits . read . unsafePerformIO $ readFile "./Inputs/008.txt"

q009 :: Integer
{-
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which a² + b² = c².
    For example, 3² + 4² = 9 + 16 = 25 = 5².
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
-}
q009 = (\(a,b,c) -> a * b * c) . head . filter (\(a,b,c) -> a + b + c == 1000) $ takeWhile (\(_,_,c) -> c < 1000) pythags

q010 :: Integer
{-
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
-}
q010 = sum $ takeWhile (< 2000000) primes

q011 :: Integer
{-
    In the 20×20 grid below, four numbers along a diagonal line have been marked with parentheses.
    --?      08  02  22  97  38  15  00  40  00  75  04  05  07  78  52  12  50  77  91  08
    --?      49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  04  56  62  00
    --?      81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  03  49  13  36  65
    --?      52  70  95  23  04  60  11  42  69  24  68  56  01  32  56  71  37  02  36  91
    --?      22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80
    --?      24  47  32  60  99  03  45  02  44  75  33  53  78  36  84  20  35  17  12  50
    --?      32  98  81  28  64  23  67  10 (26) 38  40  67  59  54  70  66  18  38  64  70
    --?      67  26  20  68  02  62  12  20  95 (63) 94  39  63  08  40  91  66  49  94  21
    --?      24  55  58  05  66  73  99  26  97  17 (78) 78  96  83  14  88  34  89  63  72
    --?      21  36  23  09  75  00  76  44  20  45  35 (14) 00  61  33  97  34  31  33  95
    --?      78  17  53  28  22  75  31  67  15  94  03  80  04  62  16  14  09  53  56  92
    --?      16  39  05  42  96  35  31  47  55  58  88  24  00  17  54  24  36  29  85  57
    --?      86  56  00  48  35  71  89  07  05  44  44  37  44  60  21  58  51  54  17  58
    --?      19  80  81  68  05  94  47  69  28  73  92  13  86  52  17  77  04  89  55  40
    --?      04  52  08  83  97  35  99  16  07  97  57  32  16  26  26  79  33  27  98  66
    --?      88  36  68  87  57  62  20  72  03  46  33  67  46  55  12  32  63  93  53  69
    --?      04  42  16  73  38  25  39  11  24  94  72  18  08  46  29  32  40  62  76  36
    --?      20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  04  36  16
    --?      20  73  35  29  78  31  90  01  74  31  49  71  48  86  81  16  23  57  05  54
    --?      01  70  54  71  83  51  54  69  16  92  33  48  61  43  52  01  89  19  67  48
    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
-}
q011 = maximum $ [verts, horizs, udiags, ddiags] <*> [grid] where
    in011 :: [[Integer]]
    in011 = map (map read . words) . lines . unsafePerformIO $ readFile "./Inputs/011.txt"

    grid :: Map (Integer, Integer) Integer
    grid = buildGrid 0 0 in011 M.empty where
        buildGrid :: Integer -> Integer -> [[Integer]] -> Map (Integer, Integer) Integer -> Map (Integer, Integer) Integer
        buildGrid _ _ []          g = g
        buildGrid r _ ([]:xs)     g = buildGrid (r+1) 0 xs g
        buildGrid r c ((i:ts):xs) g = buildGrid r (c+1) (ts:xs) $ M.insert (r,c) i g

    verts, horizs, udiags, ddiags :: Map (Integer, Integer) Integer -> Integer
    verts  g = let (r, c)  = fst $ M.findMax g
                   newbase = (,) <$> [0..r] <*> [0..c-3]
               in  foldr (max . (\(r, c) -> g M.! (r, c) * g M.! (r, c+1) * g M.! (r, c+2) * g M.! (r, c+3))) 0 newbase
    horizs g = let (r, c)  = fst $ M.findMax g
                   newbase = (,) <$> [0..r-3] <*> [0..c]
               in  foldr (max . (\(r, c) -> g M.! (r, c) * g M.! (r+1, c) * g M.! (r+2, c) * g M.! (r+3, c))) 0 newbase
    udiags g = let (r, c)  = fst $ M.findMax g
                   newbase = (,) <$> [0..r-3] <*> [3..c]
               in  foldr (max . (\(r, c) -> g M.! (r, c) * g M.! (r+1, c-1) * g M.! (r+2, c-2) * g M.! (r+3, c-3))) 0 newbase
    ddiags g = let (r, c)  = fst $ M.findMax g
                   newbase = (,) <$> [0..r-3] <*> [0..c-3]
               in  foldr (max . (\(r, c) -> g M.! (r, c) * g M.! (r+1, c+1) * g M.! (r+2, c+2) * g M.! (r+3, c+3))) 0 newbase

q012 :: Integer
{-
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
    The first ten terms would be:
    --?     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    --?      1: 1
    --?      3: 1,3
    --?      6: 1,2,3,6
    --?     10: 1,2,5,10
    --?     21: 1,3,7,21
    --?     15: 1,3,5,15
    --?     28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
-}
q012 = head $ dropWhile ((< 500) . numDivisors) triangles

q013 :: Integer
{-
    Work out the first ten digits of the sum of the one-hundred
    50-digit numbers in "./Inputs/013-in.txt".
-}
q013 = undigits . take 10 . digits $ sum in013 where
    in013 :: [Integer]
    in013 = map read . lines . unsafePerformIO $ readFile "./Inputs/013.txt"

q014 :: Integer
{-
    The following iterative sequence is defined for the set of positive integers:
    --?     n -> n/2 (n is even)
    --?     n -> 3n + 1 (n is odd)
    Using the rule above and starting with 13, we generate the following sequence:
    --?     13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
    Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
    Which starting number, under one million, produces the longest chain?
-}
q014 = maximumOn (length . collatz) [1000000,999999..1]

q015 :: Integer
{-
    Starting in the top left corner of a 2×2 grid and only being able
    to move to the right and down, there are exactly 6 routes to the
    bottom right corner. How many such routes are there through a 20×20 grid?
-}
q015 = (2*20) `choose` 20

q016 :: Integer
{-
    215 = 32768 and the sum of its digits is
    --?     3 + 2 + 7 + 6 + 8 = 26.
    What is the sum of the digits of the number 21000?
-}
q016 = sum . digits $ 2^1000

q017 :: Integer
{-
    If the numbers 1 to 5 are written out in words: one, two, three, four, five,
    then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total. If all
    the numbers from 1 to 1000 (one thousand) inclusive were written out in words,
    how many letters would be used?
    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two)
    contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.
    The use of "and" when writing out numbers is in compliance with British usage.
-}
q017 = sum $ map (genericLength . concat . words . getWord) [1..1000] where
    getWord :: Integer -> String
    getWord n
        | n ==   0 = ""
        | n ==   1 = "One"
        | n ==   2 = "Two"
        | n ==   3 = "Three"
        | n ==   4 = "Four"
        | n ==   5 = "Five"
        | n ==   6 = "Six"
        | n ==   7 = "Seven"
        | n ==   8 = "Eight"
        | n ==   9 = "Nine"
        | n ==  10 = "Ten"
        | n ==  11 = "Eleven"
        | n ==  12 = "Twelve"
        | n ==  13 = "Thirteen"
        | n ==  14 = "Fourteen"
        | n ==  15 = "Fifteen"
        | n ==  16 = "Sixteen"
        | n ==  17 = "Seventeen"
        | n ==  18 = "Eighteen"
        | n ==  19 = "Nineteen"
        | n == 1000 = "OneThousand"
        | n >= 100 = getWord (n `div` 100) ++ "Hundred" ++ if (n `mod` 100) /= 0 then "and" ++ getWord (n `mod` 100) else ""
        | n >=  90 = "Ninety" ++  getWord (n - 90)
        | n >=  80 = "Eighty" ++  getWord (n - 80)
        | n >=  70 = "Seventy" ++ getWord (n - 70)
        | n >=  60 = "Sixty" ++   getWord (n - 60)
        | n >=  50 = "Fifty" ++   getWord (n - 50)
        | n >=  40 = "Forty" ++   getWord (n - 40)
        | n >=  30 = "Thirty" ++  getWord (n - 30)
        | n >=  20 = "Twenty" ++  getWord (n - 20)

q018 :: Integer
{-
    By starting at the top of the triangle below and moving to adjacent numbers
    on the row below, the maximum total from top to bottom is 23.
    --?     3
    --?     7 4
    --?     2 4 6
    --?     8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom of the triangle in "./Inputs/018.txt".
    NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
    However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
    it cannot be solved by brute force, and requires a clever method! ;o)
-}
q018 = head $ foldr1 algo in018 where
    in018 :: [[Integer]]
    in018 = map (map read . words) . lines . unsafePerformIO $ readFile "./Inputs/018.txt"

    algo :: [Integer] -> [Integer] -> [Integer]
    algo (x:xs) (y:z:ys) = max (x+y) (x+z) : algo xs (z:ys)
    algo _ _ = []

q019 :: Integer
{-
    You are given the following information, but you may prefer to do some research for yourself.
      • 1 Jan 1900 was a Monday.
        Thirty days has September,
        April, June and November.
        All the rest have thirty-one,
        Saving February alone,
        Which has twenty-eight, rain or shine.
        And on leap years, twenty-nine.
      • A leap year occurs on any year evenly divisible by 4,
        but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
-}
q019 = genericLength . filter (\d -> weekday d == Sunday && day d == 1) $ concatMap yearCalendar [1901..2000]

q020 :: Integer
{-
    n! means n × (n − 1) × ... × 3 × 2 × 1
    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
    Find the sum of the digits in the number 100!
-}
q020 = sum . digits $ factorial 100

q021 :: Integer
{-
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
    The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
    Evaluate the sum of all the amicable numbers under 10000.
-}
q021 = sum $ filter amicable [1..10000]

q022 :: Integer
{-
    Using "./Inputs.022.txt", a 46K text file containing over five-thousand first names,
    begin by sorting it into alphabetical order. Then working out the alphabetical value
    for each name, multiply this value by its alphabetical position in the list to obtain a name score.
    For example, when the list is sorted into alphabetical order,
    COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
    So, COLIN would obtain a score of 938 × 53 = 49714.
    What is the total of all the name scores in the file?
-}
q022 = sum . zipWith (\x y -> x * (sum . map value) y) [0..] $ "" : sort in022 where
    in022 :: [String]
    in022 = map (filter isAlpha) . splitOn "\",\"" . unsafePerformIO $ readFile "./Inputs/022.txt"

    value :: Char -> Integer
    value = fromIntegral . head . (`elemIndices` ('_':['A'..'Z']))

q023 :: Integer
{-
    A perfect number is a number for which the sum of its proper divisors is exactly equal to the number.
    For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28,
    which means that 28 is a perfect number. A number n is called deficient if
    the sum of its proper divisors is less than n, and it is called abundant if this sum exceeds n.
    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number
    that can be written as the sum of two abundant numbers is 24.
    By mathematical analysis, it can be shown that all integers greater than 28123
    can be written as the sum of two abundant numbers. However, this upper limit
    cannot be reduced any further by analysis even though it is known that the greatest number that
    cannot be expressed as the sum of two abundant numbers is less than this limit.
    Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
-}
q023 = fromIntegral . sum $ filter (not . isAbundSum) [0..limit] where
    limit :: Integer
    limit = 28123

    abundants :: Set Integer
    abundants = S.fromAscList $ filter abundant [1..limit]

    isAbundSum :: Integer -> Bool
    isAbundSum n = any abundant . S.map (n -) $ S.takeWhileAntitone (<= n) abundants

q024 :: Integer
{-
    A permutation is an ordered arrangement of objects. For example,
    3124 is one possible permutation of the digits 1, 2, 3 and 4.
    If all of the permutations are listed numerically or alphabetically,
    we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
    --?     012   021   102   120   201   210
    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
-}
q024 = undigits $ sort (permutations [0..9]) !! 999999

q025 :: Integer
{-
    The Fibonacci sequence is defined by the recurrence relation:
    --?     F(n) = F(n−1) + F(n−2), where F(1) = 1 and F(2) = 1.
    Hence the first 12 terms will be:
    --?     F(1) = 1
    --?     F(2) = 1
    --?     F(3) = 2
    --?     F(4) = 3
    --?     F(5) = 5
    --?     F(6) = 8
    --?     F(7) = 13
    --?     F(8) = 21
    --?     F(9) = 34
    --?     F(10) = 55
    --?     F(11) = 89
    --?     F(12) = 144
    The 12th term, F(12), is the first term to contain three digits.
    What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
-}
q025 = genericLength $ takeWhile ((<1000) . length . digits) fibonaccis

q026 :: Integer
{-
    A unit fraction contains 1 in the numerator. The decimal representation
    of the unit fractions with denominators 2 to 10 are given:
    --?     1/2  = 0.5
    --?     1/3  = 0.(3)
    --?     1/4  = 0.25
    --?     1/5  = 0.2
    --?     1/6  = 0.1(6)
    --?     1/7  = 0.(142857)
    --?     1/8  = 0.125
    --?     1/9  = 0.(1)
    --?     1/10 = 0.1
    Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle.
    It can be seen that 1/7 has a 6-digit recurring cycle.
    Find the value of d < 1000 for which 1/d contains the longest
    recurring cycle in its decimal fraction part.
-}
q026 = maximumOn (snd . reciprocalWithCycleLength 1 []) [1..1000] where
    reciprocalWithCycleLength :: Integer -> [Integer] -> Integer -> ([Integer], Maybe Integer)
    reciprocalWithCycleLength n mods x
        | n `mod` x == 0        = ([n `div` x], Nothing)
        | n `mod` x `elem` mods = (mods, Just $ genericLength mods)
        | otherwise             = first ((last . digits) (n `div` x) :) $ reciprocalWithCycleLength (10 * n) (n `mod` x : mods) x

q027 :: Integer
{-
    Euler discovered the remarkable quadratic formula, n² + n + 41.
    It turns out that the formula will produce 40 primes for the
    consecutive integer values 0 <= n <= 39. However, when n = 40,
    40² + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly
    when n = 41, 41² + 41 + 41 is clearly divisible by 41.
    The incredible formula n² − 79n + 1601 was discovered, which produces
    80 primes for the consecutive values 0 <= n <= 79.
    The product of the coefficients, −79 and 1601, is −126479.
    Considering quadratics of the form n² + an + b, where |a| < 1000 and |b| <= 1000,
    find the product of the coefficients, a and b, for the quadratic expression that produces
    the maximum number of primes for consecutive values of n, starting with n = 0.
-}
q027 = uncurry (*) $ maximumOn (length . (\(a, b) -> takeWhile (isPrime . (\n -> n*n + a*n + b)) [0..80]))
       [ (a, b) | b <- takeWhile (<=1000) primes, a <- [-(b-2),-(b-4)..0] ]

q028 :: Integer
{-
    Starting with the number 1 and moving to the right in a clockwise direction
    a 5 by 5 spiral is formed as follows:
    --?     (21) 22  23  24 (25)
    --?      20  (7)  8  (9) 10
    --?      19   6  (1)  2  11
    --?      18  (5)  4  (3) 12
    --?     (17) 16  15  14 (13)
    It can be verified that the sum of the numbers on the diagonals is 101.
    What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
-}
q028 = sum $ spiralDiagonals 1001

q029 :: Integer
{-
    Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    --?     2^2 =  4, 2^3 =  8, 2^4 =  16, 2^5 =  32
    --?     3^2 =  9, 3^3 = 27, 3^4 =  81, 3^5 = 243
    --?     4^2 = 16, 4^3 = 64, 4^4 = 256, 4^5 =1024
    --?     5^2 = 25, 5^3 =125, 5^4 = 625, 5^5 =3125
    If they are then placed in numerical order, with any repeats removed(,) we get the following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
-}
q029 = genericLength . nubSort $ (^) <$> [2..100] <*> [2..100]

q030 :: Integer
{-
    Surprisingly there are only three numbers that can be written
    as the sum of fourth powers of their digits:
    --?     1634 = 1^4 + 6^4 + 3^4 + 4^4
    --?     8208 = 8^4 + 2^4 + 0^4 + 8^4
    --?     9474 = 9^4 + 4^4 + 7^4 + 4^4
    As 1 = 1^4 is not a sum it is not included.
    The sum of these numbers is 1634 + 8208 + 9474 = 19316.
    Find the sum of all the numbers that can be written
    as the sum of fifth powers of their digits.
-}
q030 = sum $ filter (narcissistic 5) [2..1000000]

q031 :: Integer
{-
    In the United Kingdom the currency is made up of pound (£) and pence (p).
    There are eight coins in general circulation:
    --?     1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
    It is possible to make £2 in the following way:
    --?     1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
    How many different ways can £2 be made using any number of coins?
-}
q031 = numPartitionsUsing [1,2,5,10,20,50,100,200] 200

q032 :: Integer
{-
    We shall say that an n-digit number is pandigital if it makes use
    of all the digits 1 to n exactly once. For example,
    the 5-digit number, 15234, is 1 through 5 pandigital.
    The product 7254 is unusual, as the identity, 39 × 186 = 7254,
    containing multiplicand, multiplier, and product is 1 through 9 pandigital.
    Find the sum of all products whose multiplicand/multiplier/product identity
    can be written as a 1 through 9 pandigital.
    HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.
-}
q032 = count (liftM2 (&&) pandigital1 (or . ([onefourfour, twothreefour] <*>) . pure)) [123456789..987654321] where
    onefourfour :: Integer -> Bool
    onefourfour (digits -> xs) = let x1 = head xs
                                     x2 = undigits . take 4 $ tail xs
                                     x3 = undigits $ drop 5 xs
                                 in  x1 * x2 == x3

    twothreefour :: Integer -> Bool
    twothreefour (digits -> xs) = let x1 = undigits $ take 2 xs
                                      x2 = undigits . take 3 $ drop 2 xs
                                      x3 = undigits $ drop 5 xs
                                  in  x1 * x2 == x3

q033 :: Integer
{-
    The fraction 49/98 is a curious fraction, as an inexperienced mathematician
    in attempting to simplify it may incorrectly believe that 49/98 = 4/8,
    which is correct, is obtained by cancelling the 9s. We shall consider fractions
    like, 30/50 = 3/5, to be trivial examples.
    There are exactly four non-trivial examples of this type of fraction, less than one in value,
    and containing two digits in the numerator and denominator. If the product of these
    four fractions is given in its lowest common terms, find the value of the denominator.
-}
q033 = fromIntegral (minBound :: Int)

q034 :: Integer
{-
    145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
    Find the sum of all numbers which are equal to the sum of the factorial of their digits.
    Note: as 1! = 1 and 2! = 2 are not sums they are not included.
-}
q034 = sum $ filter (ap (==) (sum . map (factorial . fromIntegral) . digits)) [3..100000]

q035 :: Integer
{-
    The number, 197, is called a circular prime because all rotations
    of the digits: 197, 971, and 719, are themselves prime.
    There are thirteen such primes below 100:
    --?     2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
    How many circular primes are there below one million?
-}
q035 = genericLength . filter circularPrime $ takeWhile (< 1000000) primes where
    circularPrime :: Integer -> Bool
    circularPrime = liftM2 (&&) (all isPrime) (not . null) . uncurry take . (length . digits &&& cyclize)

    cyclize :: Integer -> [Integer]
    cyclize n = let n' = undigits $ tail (digits n) ++ take 1 (digits n)
                in  if 0 `elem` digits n then [] else n' : cyclize n'

q036 :: Integer
{-
    The decimal number, 585 = 1001001001₂ (binary), is palindromic in both bases.
    Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
    (Please note that the palindromic number, in either base, may not include leading zeros.)
-}
q036 = sum $ filter (liftM2 (&&) palindrome palindrome2) [1..1000000] where
    palindrome2 :: Integer -> Bool
    -- ! Convert to a Word32 because Integer has arbitrary size
    -- ! and the numbers we're testing are positive and less than 1e6
    palindrome2 n = ap (==) (dropWhile not . reverse) $ toListOf bits (fromIntegral n :: Word32)

q037 :: Integer
{-
    The number 3797 has an interesting property. Being prime itself,
    it is possible to continuously remove digits from left to right,
    and remain prime at each stage: 3797, 797, 97, and 7. Similarly
    we can work from right to left: 3797, 379, 37, and 3.
    Find the sum of the only eleven primes that are both truncatable
    from left to right and right to left.
    NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
-}
q037 = sum . filter (liftM2 (&&) truncLeft truncRight) . takeWhile (< 1000000) $ dropWhile (< 10) primes where
    truncLeft :: Integer -> Bool
    truncLeft n
        | n < 10    = isPrime n
        | otherwise = isPrime n && truncLeft (undigits . tail $ digits n)

    truncRight :: Integer -> Bool
    truncRight n
        | n < 10    = isPrime n
        | otherwise = isPrime n && truncRight (undigits . init $ digits n)

q038 :: Integer
{-
    Take the number 192 and multiply it by each of 1, 2, and 3:
    --?     192 × 1 = 192
    --?     192 × 2 = 384
    --?     192 × 3 = 576
    By concatenating each product we get the 1 to 9 pandigital, 192384576.
    We will call 192384576 the concatenated product of 192 and (1,2,3)
    The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5,
    giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
    What is the largest 1 to 9 pandigital 9-digit number that can be formed as the
    concatenated product of an integer with (1, 2, ..., n) where n > 1?
-}
q038 = head . filter (\x -> pandigital1 x && any (\n -> all ((== 0) . (x `mod`)) [1 .. n]) [2..9]) $ reverse [100000000..987654321]

q039 :: Integer
{-
    If p is the perimeter of a right angle triangle with integral length sides, {a,b,c},
    there are exactly three solutions for p = 120.
    --?     {20,48,52}, {24,45,51}, {30,40,50}
    For which value of p <= 1000, is the number of solutions maximised?
-}
q039 = perim . head $ maximumOn length tris where
    perim :: (Integer, Integer, Integer) -> Integer
    perim (x, y, z) = x + y + z

    tris :: [[(Integer, Integer, Integer)]]
    tris = groupSortOn perim $ take 500 pythags

q040 :: Integer
{-
    An irrational decimal fraction is created by concatenating the positive integers:
    --?     0.12345678910(1)112131415161718192021...
    It can be seen that the 12th digit of the fractional part is 1.
    If d(n) represents the nth digit of the fractional part, find the value of the following expression.
    --?     d(1) × d(10) × d(100) × d(1000) × d(10000) × d(100000) × d(1000000)
-}
q040 = product $ map ((champernowne !!) . (10^)) [0..6] where
    champernowne :: [Integer]
    champernowne = concatMap digits [0..]

q041 :: Integer
{-
    We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once.
    For example, 2143 is a 4-digit pandigital and is also prime.
    What is the largest n-digit pandigital prime that exists?
-}
q041 = last . filter pandigital1 . takeWhile (< 10000000) $ primes
-- ! cannot have 8 or 9 digits as (sum [1..8]) and (sum [1..9]) are divisible by 3

q042 :: Integer
{-
    The nth term of the sequence of triangle numbers is given by, t(n) = (1/2)n(n+1);
    so the first ten triangle numbers are:
    --?     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    By converting each letter in a word to a number corresponding to its alphabetical
    position and adding these values we form a word value. For example,
    the word value for SKY is 19 + 11 + 25 = 55 = t(10). If the word value
    is a triangle number then we shall call the word a triangle word.
    Using "./Inputs/042.txt", a 16K text file containing nearly two-thousand common English words, how many are triangle words?
-}
q042 = fromIntegral $ count ((\n -> n `elem` takeWhile (<=n) triangles) . sum . map value) in042 where
    in042 :: [String]
    in042 = map (filter isAlpha) . lines . unsafePerformIO $ readFile "./Inputs/042.txt"

    value :: Char -> Integer
    value = fromIntegral . head . (`elemIndices` ('_':['A'..'Z']))

q043 :: Integer
{-
    The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits
    0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
    Let d(1) be the 1st digit, d(2) be the 2nd digit, and so on. In this way, we note the following:
    --?     d(2)d(3)d(4)  = 406 is divisible by 2
    --?     d(3)d(4)d(5)  = 063 is divisible by 3
    --?     d(4)d(5)d(6)  = 635 is divisible by 5
    --?     d(5)d(6)d(7)  = 357 is divisible by 7
    --?     d(6)d(7)d(8)  = 572 is divisible by 11
    --?     d(7)d(8)d(9)  = 728 is divisible by 13
    --?     d(8)d(9)d(10) = 289 is divisible by 17
    Find the sum of all 0 to 9 pandigital numbers with this property.
-}
q043 = sum . filter (and . (map test [1..7] <*>) . pure) . map undigits . filter ((/=0) . head) $ permutations [0..9] where
    test :: Integer -> Integer -> Bool
    test k n = (==0) . (`mod` head (genericDrop (k-1) primes)) . undigits . genericTake 3 . genericDrop k $ digits n

q044 :: Integer
{-
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
    --?     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their difference, 70 − 22 = 48, is not pentagonal.
    Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and difference
    are pentagonal and D = |P(k) − P(j)| is minimised; what is the value of D?
-}
q044 = uncurry (-) firstPentPair where
    isPentagonal :: Integer -> Bool
    isPentagonal x = let q = (sqrt (24 * fromIntegral x + 1) + 1) / 6 :: Double
                     in  floor q == ceiling q

    firstPentPair :: (Integer, Integer)
    firstPentPair = pentFinder 2 1 where
        pentFinder j k = let n = j * (3 * j - 1) `div` 2
                             m = k * (3 * k - 1) `div` 2
                         in  if | isPentagonal (n-m) && isPentagonal (n+m) -> (n, m)
                                | j == k    -> pentFinder (j + 1) 1
                                | otherwise -> pentFinder j (k + 1)

q045 :: Integer
{-
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    --?     Triangle     T(n) = n(n+1)/2     1, 3,  6, 10, 15, ...
    --?     Pentagonal   P(n) = n(3n−1)/2    1, 5, 12, 22, 35, ...
    --?     Hexagonal    H(n) = n(2n−1)      1, 6, 15, 28, 45, ...
    It can be verified that T(285) = P(165) = H(143) = 40755.
    Find the next triangle number that is also pentagonal and hexagonal.
-}
q045 = filter isPentagonal hexagons !! 2 where
    -- ! all hexagonal numbers are triangular!
    isPentagonal :: Integer -> Bool
    isPentagonal x = let q = (sqrt (24 * fromIntegral x + 1) + 1) / 6 :: Double
                     in  floor q == ceiling q

q046 :: Integer
{-
    It was proposed by Christian Goldbach that every odd composite number
    can be written as the sum of a prime and twice a square.
    --?      9 =  7 + 2×1²
    --?     15 =  7 + 2×2²
    --?     21 =  3 + 2×3²
    --?     25 =  7 + 2×3²
    --?     27 = 19 + 2×2²
    --?     33 = 31 + 2×1²
    It turns out that the conjecture was false.
    What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
-}
q046 = head $ filter (liftM2 (&&) nonGoldbach (not . isPrime)) [3,5..10001] where
    nonGoldbach :: Integer -> Bool
    nonGoldbach n = null [ a + 2*b | a <- takeWhile (< n) primes, b <- takeWhile (<= n`div`2) squares, n == a + 2*b ]

q047 :: Integer
{-
    The first two consecutive numbers to have two distinct prime factors are:
    --?      14 = 2  × 7
    --?      15 = 3  × 5
    The first three consecutive numbers to have three distinct prime factors are:
    --?     644 = 2² ×  7 × 23
    --?     645 = 3  ×  5 × 43
    --?     646 = 2  × 17 × 19
    Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?
-}
q047 = firstOfFourConsecutive fourDistinctFactors [100000..] where
    fourDistinctFactors :: Integer -> Bool
    fourDistinctFactors = (>=4) . length . distinctPrimeFactors

    firstOfFourConsecutive :: (a -> Bool) -> [a] -> a
    firstOfFourConsecutive b (x:y:z:w:rest)
        | all b [x, y, z, w] = x
        | otherwise = firstOfFourConsecutive b (y:z:w:rest)
    firstOfFourConsecutive _ _ = error "none found"

q048 :: Integer
{-
    The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.
    Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
-}
q048 = undigits . reverse . take 10 . reverse . digits . sum $ map (\n -> n^n) [1..1000]

q049 :: Integer
{-
    The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways:
        (i) each of the three terms are prime, and,
        (ii) each of the 4-digit numbers are permutations of one another.
    There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes,
    exhibiting this property, but there is one other 4-digit increasing sequence.
    What 12-digit number do you form by concatenating the three terms in this sequence?
-}
q049 = read . concatMap show . head . nubOrd . concat . filter (not . null) $ map ((filter arith . subsOfLength3) . nubSort . (`getPermsIn` fourDigitPrimes)) fourDigitPrimes where
    fourDigitPrimes :: [Integer]
    fourDigitPrimes = takeWhile ((==4) . length . digits) $ dropWhile ((<=3) . length . digits) primes

    getPermsIn :: Integer -> [Integer] -> [Integer]
    n `getPermsIn` ns = filter ((`elem` permutations (digits n)) . digits) ns

    arith :: [Integer] -> Bool
    arith (x:y:xs) = arith' (y - x) (y:xs) where
        arith' n (y:z:zs) = z - y == n && arith' n (y:zs)
        arith' _ _        = True
    arith _        = True

    subsOfLength3 :: [a] -> [[a]]
    subsOfLength3 (x:y:z:xs) = [x,y,z] : subsOfLength3 (y:z:xs)
    subsOfLength3 _ = []

q050 :: Integer
{-
    The prime 41, can be written as the sum of six consecutive primes:
    --?     41 = 2 + 3 + 5 + 7 + 11 + 13
    This is the longest sum of consecutive primes that adds to a prime below one-hundred.
    The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.
    Which prime, below one-million, can be written as the sum of the most consecutive primes?
-}
q050 = (\(_,_,s) -> s) . maximumOn (\(_,k,_) -> k)
     . take 10 -- ! the longest chain likely starts from one of the smallest primes!
     $ map last consecutivePrimeSums where
    consecutivePrimeSums :: [[(Integer, Integer, Integer)]]
    consecutivePrimeSums = groupOn (\(x,_,_) -> x) $ consecutivePrimeSums' 0 1 where
        consecutivePrimeSums' n k
            | primes !! max 0 (fromIntegral n)     > 1000000 = []
            | otherwise = let m = sum (genericTake k $ genericDrop n primes)
                        in  if | m <= 1000000 && isPrime m -> (primes !! fromIntegral n, k, m) : consecutivePrimeSums' n (k+1)
                                | m <= 1000000 -> consecutivePrimeSums' n (k+1)
                                | otherwise    -> consecutivePrimeSums' (n+1) 1

q051 :: Integer
{-
    By replacing the first digit of the 2-digit number #3, it turns out that
    six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
    By replacing the 3rd and 4th digits of 56##3 with the same digit,
    this 5-digit number is the first example having seven primes among
    the ten generated numbers, yielding the family:
    --?     56003, 56113, 56333, 56443, 56663, 56773, and 56993.
    Consequently 56003, being the first member of this family, is the smallest
    prime with this property. Find the smallest prime which, by replacing part
    of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.
-}
q051 = head $ filter (\n -> (>=8) . length . filter isPrime . replaceDigits n $ threeSamePositions n) searchSpace where
    searchSpace :: [Integer]
    searchSpace = filter threeSameNotLast sixDigitPrimes

    replaceDigits :: Integer -> [Integer] -> [Integer]
    replaceDigits n ks
        | any (> genericLength (digits n)) ks = []
        | 0 `elem` ks = replaceDigits' n ks [1..9]
        | otherwise   = replaceDigits' n ks [0..9]
        where
            replaceDigits' :: Integer -> [Integer] -> [Integer] -> [Integer]
            replaceDigits' n ks ls =
                let n' = array (0, genericLength (digits n) - 1) (zip [0..] $ digits n)
                in  map (undigits . toList . (n' //)) . groupSortOn snd $ (,) <$> ks <*> ls

    sixDigitPrimes :: [Integer]
    sixDigitPrimes = takeWhile ((==6) . length . digits) $ dropWhile ((<6) . length . digits) primes

    threeSameNotLast :: Integer -> Bool
    threeSameNotLast n = let k = last (digits n) in any ((>=3) . length) . filter (any (/=k)) . group . sort $ digits n

    threeSamePositions :: Integer -> [Integer]
    threeSamePositions n
        | threeSameNotLast n = let k = head . head . filter ((>=3) . length) . group . sort $ digits n in map fromIntegral $ elemIndices k (digits n)
        | otherwise          = []

q052 :: Integer
{-
    It can be seen that the number, 125874, and its double, 251748,
    contain exactly the same digits, but in a different order.
    Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
-}
q052 = head $ filter test [100000..999999] where
    test :: Integer -> Bool
    test n = let ns  = sort (digits n)
                 ns2 = sort (digits $ 2 * n)
                 ns3 = sort (digits $ 3 * n)
                 ns4 = sort (digits $ 4 * n)
                 ns5 = sort (digits $ 5 * n)
                 ns6 = sort (digits $ 6 * n)
             in  all (ns ==) [ns2, ns3, ns4, ns5, ns6]

q053 :: Integer
{-
    There are exactly ten ways of selecting three from five, 12345:
    --?     123, 124, 125, 134, 135, 145, 234, 235, 245, 345
    In combinatorics, we use the notation, (5 : 3) = 10.
    In general, (n : r) = n! / r!(n−r)!, where r <= n, n! = n × (n−1) × ... × 3 × 2 × 1, and 0! = 1.
    It is not until n = 23, that a value exceeds one-million: (23 : 10) = 1144066.
    How many, not necessarily distinct, values of (n, r)
    for 1 <= n <= 100, are greater than one-million?
-}
q053 = genericLength [ (n, r) | n <- [1..100], r <- [0..n], n `choose` r > 1000000 ]

q054 :: Integer
{-
    In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:
    --?     High Card: Highest value card.
    --?     One Pair: Two cards of the same value.
    --?     Two Pairs: Two different pairs.
    --?     Three of a Kind: Three cards of the same value.
    --?     Straight: All cards are consecutive values.
    --?     Flush: All cards of the same suit.
    --?     Full House: Three of a kind and a pair.
    --?     Four of a Kind: Four cards of the same value.
    --?     Straight Flush: All cards are consecutive values of same suit.
    --?     Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.
    The cards are valued in the order:
    --?     2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.
    If two players have the same ranked hands then the rank made up of the highest value wins;
    for example, a pair of eights beats a pair of fives (see example 1 below).
    But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared;
    if the highest cards tie then the next highest cards are compared, and so on.
    The file, "./Inputs/054.txt", contains one-thousand random hands dealt to two players.
    Each line of the file contains ten cards (separated by a single space):
    the first five are Player 1's cards and the last five are Player 2's cards.
    You can assume that all hands are valid (no invalid characters or repeated cards),
    each player's hand is in no specific order, and in each hand there is a clear winner.
    How many hands does Player 1 win?
-}
q054 = count (uncurry (>)) in054 -- ! declared in Poker.hs

q055 :: Integer
{-
    If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
    Not all numbers produce palindromes so quickly. For example,
    --?      349 +  943 = 1292
    --?     1292 + 2921 = 4213
    --?     4213 + 3124 = 7337
    That is, 349 took three iterations to arrive at a palindrome.
    Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome.
    A number that never forms a palindrome through the reverse and add process is called a Lychrel number.
    Due to the theoretical nature of these numbers, and for the purpose of this problem,
    we shall assume that a number is Lychrel until proven otherwise.
    In addition you are given that for every number below ten-thousand, it will either
        (i) become a palindrome in less than fifty iterations, or,
        (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome.
    In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome:
    --?     4668731596684224866951378664 (53 iterations, 28-digits).
    Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.
    How many Lychrel numbers are there below ten-thousand?
-}
q055 = fromIntegral $ count lychrel [1..10000] where
    lychrel :: Integer -> Bool
    lychrel = none palindrome . take 50 . drop 1 . iterate (\x -> x + backward x)

q056 :: Integer
{-
    A googol (10^100) is a massive number: one followed by one-hundred zeros;
    100^100 is almost unimaginably large: one followed by two-hundred zeros.
    Despite their size, the sum of the digits in each number is only 1.
    Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?
-}
q056 = maximum [ sum $ digits (a^b) | a <- [1..99], b <- [1..99] ]

q057 :: Integer
{-
    It is possible to show that the square root of two can be expressed as an infinite continued fraction.
    --?     √2 = 1 + 1/(2 + 1/(2 + 1/(2 + ...)))
    By expanding this for the first four iterations, we get:
    --?     1 + 1/2 = 3/2 = 1.5
    --?     1 + 1/(2 + 1/2) = 7/5 = 1.4
    --?     1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
    --?     1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
    The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion,
    1393985, is the first example where the number of digits in the numerator exceeds
    the number of digits in the denominator. In the first one-thousand expansions,
    how many fractions contain a numerator with more digits than the denominator?
-}
q057 = count (\rat -> length (digits $ numerator rat) > length (digits $ denominator rat)) . take 1000 . drop 1 $ continuedFraction 1 1 (repeat 2)

q058 :: Integer
{-
    Starting with 1 and spiralling anticlockwise in the following way,
    a square spiral with side length 7 is formed.
    --?     (37) 36  35  34  33  32 (31)
    --?      38 (17) 16  15  14 (13) 30
    --?      39  18  (5)  4  (3) 12  29
    --?      40  19   6   1   2  11  28
    --?      41  20  (7)  8   9  10  27
    --?      42  21  22  23  24  25  26
    --?     (43) 44  45  46  47  48  49
    It is interesting to note that the odd squares lie along the bottom right diagonal,
    but what is more interesting is that 8 out of the 13 numbers lying along
    both diagonals are prime; that is, a ratio of --? 8/13 ~= 62%.
    If one complete new layer is wrapped around the spiral above, a square spiral with
    side length 9 will be formed. If this process is continued, what is the side length
    of the square spiral for which the ratio of primes along both diagonals first falls below 10%?
-}
q058 = primeRatioSideLength 0 1 . tail $ spiralDiagonals 30001 where
    primeRatioSideLength :: Integer -> Integer -> [Integer] -> Integer
    primeRatioSideLength !ps !all (x:y:z:w:xs) =
        let p = count isPrime [x,y,z,w]
        in  if (ps+p) % (all+4) < 1 % 10 then (all+5) `div` 2 else primeRatioSideLength (ps+p) (all+4) xs
    primeRatioSideLength ps all _ = if ps % all < 1 % 10 then all else 0

q059 :: Integer
{-
    Each character on a computer is assigned a unique code and the preferred standard is
    ASCII (American Standard Code for Information Interchange). For example,
    --?     uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.
    A modern encryption method is to take a text file, convert the bytes to ASCII,
    then XOR each byte with a given value, taken from a secret key.
    The advantage with the XOR function is that using the same encryption key
    on the cipher text, restores the plain text; for example,
    --?     65 XOR 42 = 107, then 107 XOR 42 = 65.
    For unbreakable encryption, the key is the same length as the plain text message,
    and the key is made up of random bytes. The user would keep the encrypted message
    and the encryption key in different locations, and without both "halves",
    it is impossible to decrypt the message. Unfortunately, this method is impractical
    for most users, so the modified method is to use a password as a key.
    If the password is shorter than the message, which is likely, the key is repeated
    cyclically throughout the message. The balance for this method is using a sufficiently
    long password key for security, but short enough to be memorable.
    Your task has been made easy, as the encryption key consists of three lower case characters.
    Using "./Inputs/059.txt", a file containing the encrypted ASCII codes,
    and the knowledge that the plain text must contain common English words,
    decrypt the message and find the sum of the ASCII values in the original text.
-}
q059 = fromIntegral . sum . map ord . head . filter (" the " `isInfixOf`) $ map (map (chr . fromIntegral) . zipWith xor in059 . cycle) threeLetters where
    in059 :: [Integer]
    in059 = map read . lines . unsafePerformIO $ readFile "./Inputs/059.txt"

    threeLetters :: [[Integer]]
    threeLetters = (\x y z -> map fromIntegral [ord x, ord y, ord z]) <$> ['a'..'z'] <*> ['a'..'z'] <*> ['a'..'z']

q060 :: Integer
{-
    The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them
    in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime.
    The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.
    Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.
-}
q060 = sum $ minimumOn sum fiveConcatenablePrimes where
    primeBound :: [Integer]
    primeBound = takeWhile (<=10000) primes

    fiveConcatenablePrimes :: [[Integer]]
    fiveConcatenablePrimes = [ [a, b, c, d, e]
                             | a <- primeBound
                             , b <- dropWhile (<=a) primeBound
                             , concatenablePrime [a] b
                             , c <- dropWhile (<=b) primeBound
                             , concatenablePrime [a,b] c
                             , d <- dropWhile (<=c) primeBound
                             , concatenablePrime [a,b,c] d
                             , e <- dropWhile (<=d) primeBound
                             , concatenablePrime [a,b,c,d] e
                             ]

    concatenablePrime :: [Integer] -> Integer -> Bool
    concatenablePrime xs n = all isPrime $ [catLeft n, catRight n] <*> xs

    catLeft, catRight :: Integer -> Integer -> Integer
    catLeft  n k = undigits $ digits n ++ digits k
    catRight     = flip catLeft

q061 :: Integer
{-
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all
    figurate (polygonal) numbers and are generated by the following formulae:
    --?     Triangle       P(3,n) = n(n+1)/2      1, 3,  6, 10, 15, ...
    --?     Square         P(4,n) = n²            1, 4,  9, 16, 25, ...
    --?     Pentagonal     P(5,n) = n(3n−1)/2     1, 5, 12, 22, 35, ...
    --?     Hexagonal      P(6,n) = n(2n−1)       1, 6, 15, 28, 45, ...
    --?     Heptagonal     P(7,n) = n(5n−3)/2     1, 7, 18, 34, 55, ...
    --?    Octagonal      P(8,n) = n(3n−2)       1, 8, 21, 40, 65, ...
    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
        (1) The set is cyclic, in that the last two digits of each number is
            the first two digits of the next number (including the last number with the first).
        (2) Each polygonal type: triangle (P(3,127) = 8128), square (P(4,91) = 8281),
            and pentagonal (P5,44=2882), is represented by a different number in the set.
        (3) This is the only set of 4-digit numbers with this property.
    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
    triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
-}
q061 = sum . head . head $ filter (any (\xs -> isCycle (head xs) (tail xs))) searchSpace where
    searchSpace :: [[[Integer]]]
    searchSpace = [ combinations [a,b,c,d,e,f]
                  | a <- validNgons 3, b <- validNgons 4, b /= a, c <- validNgons 5, c `notElem` [a,b]
                  , d <- validNgons 6, d `notElem` [a,b,c], e <- validNgons 7, e `notElem` [a,b,c,d], f <- validNgons 8, f `notElem` [a,b,c,d,e]
                  ]

    validNgons :: Integer -> [Integer]
    validNgons = filter ((/=0) . (!! 2) . digits) . takeWhile ((<5) . length . digits) . dropWhile ((<4) . length . digits) . ngons

    combinations :: (Eq a) => [a] -> [[a]]
    combinations []     = [[]]
    combinations (x:xs) = map (x :) $ permutations xs

    isCycle :: Integer -> [Integer] -> Bool
    isCycle x []  = False
    isCycle x [y] = drop 2 (digits y) == take 2 (digits x)
    isCycle x (z:y:xs) = drop 2 (digits z) == take 2 (digits y) && isCycle x (y:xs)















-- ? is there a better way to do this...?
q :: Integer -> Integer
q = \case
    1   -> q001
    2   -> q002
    3   -> q003
    4   -> q004
    5   -> q005
    6   -> q006
    7   -> q007
    8   -> q008
    9   -> q009
    10  -> q010
    11  -> q011
    12  -> q012
    13  -> q013
    14  -> q014
    15  -> q015
    16  -> q016
    17  -> q017
    18  -> q018
    19  -> q019
    20  -> q020
    21  -> q021
    22  -> q022
    23  -> q023
    24  -> q024
    25  -> q025
    26  -> q026
    27  -> q027
    28  -> q028
    29  -> q029
    30  -> q030
    31  -> q031
    32  -> q032
    33  -> q033
    34  -> q034
    35  -> q035
    36  -> q036
    37  -> q037
    38  -> q038
    39  -> q039
    40  -> q040
    41  -> q041
    42  -> q042
    43  -> q043
    44  -> q044
    45  -> q045
    46  -> q046
    47  -> q047
    48  -> q048
    49  -> q049
    50  -> q050
    51  -> q051
    52  -> q052
    53  -> q053
    54  -> q054
    55  -> q055
    56  -> q056
    57  -> q057
    58  -> q058
    59  -> q059
    60  -> q060
    61  -> q061
    -- 62  -> q062
    -- 63  -> q063
    -- 64  -> q064
    -- 65  -> q065
    -- 66  -> q066
    -- 67  -> q067
    -- 68  -> q068
    -- 69  -> q069
    -- 70  -> q070
    -- 71  -> q071
    -- 72  -> q072
    -- 73  -> q073
    -- 74  -> q074
    -- 75  -> q075
    -- 76  -> q076
    -- 77  -> q077
    -- 78  -> q078
    -- 79  -> q079
    -- 80  -> q080
    -- 81  -> q081
    -- 82  -> q082
    -- 83  -> q083
    -- 84  -> q084
    -- 85  -> q085
    -- 86  -> q086
    -- 87  -> q087
    -- 88  -> q088
    -- 89  -> q089
    -- 90  -> q090
    -- 91  -> q091
    -- 92  -> q092
    -- 93  -> q093
    -- 94  -> q094
    -- 95  -> q095
    -- 96  -> q096
    -- 97  -> q097
    -- 98  -> q098
    -- 99  -> q099
    -- 100 -> q100
    -- 101 -> q101
    -- 102 -> q102
    -- 103 -> q103
    -- 104 -> q104
    -- 105 -> q105
    -- 106 -> q106
    -- 107 -> q107
    -- 108 -> q108
    -- 109 -> q109
    -- 110 -> q110
    -- 111 -> q111
    -- 112 -> q112
    -- 113 -> q113
    -- 114 -> q114
    -- 115 -> q115
    -- 116 -> q116
    -- 117 -> q117
    -- 118 -> q118
    -- 119 -> q119
    -- 120 -> q120
    -- 121 -> q121
    -- 122 -> q122
    -- 123 -> q123
    -- 124 -> q124
    -- 125 -> q125
    -- 126 -> q126
    -- 127 -> q127
    -- 128 -> q128
    -- 129 -> q129
    -- 130 -> q130
    -- 131 -> q131
    -- 132 -> q132
    -- 133 -> q133
    -- 134 -> q134
    -- 135 -> q135
    -- 136 -> q136
    -- 137 -> q137
    -- 138 -> q138
    -- 139 -> q139
    -- 140 -> q140
    -- 141 -> q141
    -- 142 -> q142
    -- 143 -> q143
    -- 144 -> q144
    -- 145 -> q145
    -- 146 -> q146
    -- 147 -> q147
    -- 148 -> q148
    -- 149 -> q149
    -- 150 -> q150
    -- 151 -> q151
    -- 152 -> q152
    -- 153 -> q153
    -- 154 -> q154
    -- 155 -> q155
    -- 156 -> q156
    -- 157 -> q157
    -- 158 -> q158
    -- 159 -> q159
    -- 160 -> q160
    -- 161 -> q161
    -- 162 -> q162
    -- 163 -> q163
    -- 164 -> q164
    -- 165 -> q165
    -- 166 -> q166
    -- 167 -> q167
    -- 168 -> q168
    -- 169 -> q169
    -- 170 -> q170
    -- 171 -> q171
    -- 172 -> q172
    -- 173 -> q173
    -- 174 -> q174
    -- 175 -> q175
    -- 176 -> q176
    -- 177 -> q177
    -- 178 -> q178
    -- 179 -> q179
    -- 180 -> q180
    -- 181 -> q181
    -- 182 -> q182
    -- 183 -> q183
    -- 184 -> q184
    -- 185 -> q185
    -- 186 -> q186
    -- 187 -> q187
    -- 188 -> q188
    -- 189 -> q189
    -- 190 -> q190
    -- 191 -> q191
    -- 192 -> q192
    -- 193 -> q193
    -- 194 -> q194
    -- 195 -> q195
    -- 196 -> q196
    -- 197 -> q197
    -- 198 -> q198
    -- 199 -> q199
    -- 200 -> q200
    -- 201 -> q201
    -- 202 -> q202
    -- 203 -> q203
    -- 204 -> q204
    -- 205 -> q205
    -- 206 -> q206
    -- 207 -> q207
    -- 208 -> q208
    -- 209 -> q209
    -- 210 -> q210
    -- 211 -> q211
    -- 212 -> q212
    -- 213 -> q213
    -- 214 -> q214
    -- 215 -> q215
    -- 216 -> q216
    -- 217 -> q217
    -- 218 -> q218
    -- 219 -> q219
    -- 220 -> q220
    -- 221 -> q221
    -- 222 -> q222
    -- 223 -> q223
    -- 224 -> q224
    -- 225 -> q225
    -- 226 -> q226
    -- 227 -> q227
    -- 228 -> q228
    -- 229 -> q229
    -- 230 -> q230
    -- 231 -> q231
    -- 232 -> q232
    -- 233 -> q233
    -- 234 -> q234
    -- 235 -> q235
    -- 236 -> q236
    -- 237 -> q237
    -- 238 -> q238
    -- 239 -> q239
    -- 240 -> q240
    -- 241 -> q241
    -- 242 -> q242
    -- 243 -> q243
    -- 244 -> q244
    -- 245 -> q245
    -- 246 -> q246
    -- 247 -> q247
    -- 248 -> q248
    -- 249 -> q249
    -- 250 -> q250
    -- 251 -> q251
    -- 252 -> q252
    -- 253 -> q253
    -- 254 -> q254
    -- 255 -> q255
    -- 256 -> q256
    -- 257 -> q257
    -- 258 -> q258
    -- 259 -> q259
    -- 260 -> q260
    -- 261 -> q261
    -- 262 -> q262
    -- 263 -> q263
    -- 264 -> q264
    -- 265 -> q265
    -- 266 -> q266
    -- 267 -> q267
    -- 268 -> q268
    -- 269 -> q269
    -- 270 -> q270
    -- 271 -> q271
    -- 272 -> q272
    -- 273 -> q273
    -- 274 -> q274
    -- 275 -> q275
    -- 276 -> q276
    -- 277 -> q277
    -- 278 -> q278
    -- 279 -> q279
    -- 280 -> q280
    -- 281 -> q281
    -- 282 -> q282
    -- 283 -> q283
    -- 284 -> q284
    -- 285 -> q285
    -- 286 -> q286
    -- 287 -> q287
    -- 288 -> q288
    -- 289 -> q289
    -- 290 -> q290
    -- 291 -> q291
    -- 292 -> q292
    -- 293 -> q293
    -- 294 -> q294
    -- 295 -> q295
    -- 296 -> q296
    -- 297 -> q297
    -- 298 -> q298
    -- 299 -> q299
    -- 300 -> q300
    -- 301 -> q301
    -- 302 -> q302
    -- 303 -> q303
    -- 304 -> q304
    -- 305 -> q305
    -- 306 -> q306
    -- 307 -> q307
    -- 308 -> q308
    -- 309 -> q309
    -- 310 -> q310
    -- 311 -> q311
    -- 312 -> q312
    -- 313 -> q313
    -- 314 -> q314
    -- 315 -> q315
    -- 316 -> q316
    -- 317 -> q317
    -- 318 -> q318
    -- 319 -> q319
    -- 320 -> q320
    -- 321 -> q321
    -- 322 -> q322
    -- 323 -> q323
    -- 324 -> q324
    -- 325 -> q325
    -- 326 -> q326
    -- 327 -> q327
    -- 328 -> q328
    -- 329 -> q329
    -- 330 -> q330
    -- 331 -> q331
    -- 332 -> q332
    -- 333 -> q333
    -- 334 -> q334
    -- 335 -> q335
    -- 336 -> q336
    -- 337 -> q337
    -- 338 -> q338
    -- 339 -> q339
    -- 340 -> q340
    -- 341 -> q341
    -- 342 -> q342
    -- 343 -> q343
    -- 344 -> q344
    -- 345 -> q345
    -- 346 -> q346
    -- 347 -> q347
    -- 348 -> q348
    -- 349 -> q349
    -- 350 -> q350
    -- 351 -> q351
    -- 352 -> q352
    -- 353 -> q353
    -- 354 -> q354
    -- 355 -> q355
    -- 356 -> q356
    -- 357 -> q357
    -- 358 -> q358
    -- 359 -> q359
    -- 360 -> q360
    -- 361 -> q361
    -- 362 -> q362
    -- 363 -> q363
    -- 364 -> q364
    -- 365 -> q365
    -- 366 -> q366
    -- 367 -> q367
    -- 368 -> q368
    -- 369 -> q369
    -- 370 -> q370
    -- 371 -> q371
    -- 372 -> q372
    -- 373 -> q373
    -- 374 -> q374
    -- 375 -> q375
    -- 376 -> q376
    -- 377 -> q377
    -- 378 -> q378
    -- 379 -> q379
    -- 380 -> q380
    -- 381 -> q381
    -- 382 -> q382
    -- 383 -> q383
    -- 384 -> q384
    -- 385 -> q385
    -- 386 -> q386
    -- 387 -> q387
    -- 388 -> q388
    -- 389 -> q389
    -- 390 -> q390
    -- 391 -> q391
    -- 392 -> q392
    -- 393 -> q393
    -- 394 -> q394
    -- 395 -> q395
    -- 396 -> q396
    -- 397 -> q397
    -- 398 -> q398
    -- 399 -> q399
    -- 400 -> q400
    -- 401 -> q401
    -- 402 -> q402
    -- 403 -> q403
    -- 404 -> q404
    -- 405 -> q405
    -- 406 -> q406
    -- 407 -> q407
    -- 408 -> q408
    -- 409 -> q409
    -- 410 -> q410
    -- 411 -> q411
    -- 412 -> q412
    -- 413 -> q413
    -- 414 -> q414
    -- 415 -> q415
    -- 416 -> q416
    -- 417 -> q417
    -- 418 -> q418
    -- 419 -> q419
    -- 420 -> q420
    -- 421 -> q421
    -- 422 -> q422
    -- 423 -> q423
    -- 424 -> q424
    -- 425 -> q425
    -- 426 -> q426
    -- 427 -> q427
    -- 428 -> q428
    -- 429 -> q429
    -- 430 -> q430
    -- 431 -> q431
    -- 432 -> q432
    -- 433 -> q433
    -- 434 -> q434
    -- 435 -> q435
    -- 436 -> q436
    -- 437 -> q437
    -- 438 -> q438
    -- 439 -> q439
    -- 440 -> q440
    -- 441 -> q441
    -- 442 -> q442
    -- 443 -> q443
    -- 444 -> q444
    -- 445 -> q445
    -- 446 -> q446
    -- 447 -> q447
    -- 448 -> q448
    -- 449 -> q449
    -- 450 -> q450
    -- 451 -> q451
    -- 452 -> q452
    -- 453 -> q453
    -- 454 -> q454
    -- 455 -> q455
    -- 456 -> q456
    -- 457 -> q457
    -- 458 -> q458
    -- 459 -> q459
    -- 460 -> q460
    -- 461 -> q461
    -- 462 -> q462
    -- 463 -> q463
    -- 464 -> q464
    -- 465 -> q465
    -- 466 -> q466
    -- 467 -> q467
    -- 468 -> q468
    -- 469 -> q469
    -- 470 -> q470
    -- 471 -> q471
    -- 472 -> q472
    -- 473 -> q473
    -- 474 -> q474
    -- 475 -> q475
    -- 476 -> q476
    -- 477 -> q477
    -- 478 -> q478
    -- 479 -> q479
    -- 480 -> q480
    -- 481 -> q481
    -- 482 -> q482
    -- 483 -> q483
    -- 484 -> q484
    -- 485 -> q485
    -- 486 -> q486
    -- 487 -> q487
    -- 488 -> q488
    -- 489 -> q489
    -- 490 -> q490
    -- 491 -> q491
    -- 492 -> q492
    -- 493 -> q493
    -- 494 -> q494
    -- 495 -> q495
    -- 496 -> q496
    -- 497 -> q497
    -- 498 -> q498
    -- 499 -> q499
    -- 500 -> q500
    -- 501 -> q501
    -- 502 -> q502
    -- 503 -> q503
    -- 504 -> q504
    -- 505 -> q505
    -- 506 -> q506
    -- 507 -> q507
    -- 508 -> q508
    -- 509 -> q509
    -- 510 -> q510
    -- 511 -> q511
    -- 512 -> q512
    -- 513 -> q513
    -- 514 -> q514
    -- 515 -> q515
    -- 516 -> q516
    -- 517 -> q517
    -- 518 -> q518
    -- 519 -> q519
    -- 520 -> q520
    -- 521 -> q521
    -- 522 -> q522
    -- 523 -> q523
    -- 524 -> q524
    -- 525 -> q525
    -- 526 -> q526
    -- 527 -> q527
    -- 528 -> q528
    -- 529 -> q529
    -- 530 -> q530
    -- 531 -> q531
    -- 532 -> q532
    -- 533 -> q533
    -- 534 -> q534
    -- 535 -> q535
    -- 536 -> q536
    -- 537 -> q537
    -- 538 -> q538
    -- 539 -> q539
    -- 540 -> q540
    -- 541 -> q541
    -- 542 -> q542
    -- 543 -> q543
    -- 544 -> q544
    -- 545 -> q545
    -- 546 -> q546
    -- 547 -> q547
    -- 548 -> q548
    -- 549 -> q549
    -- 550 -> q550
    -- 551 -> q551
    -- 552 -> q552
    -- 553 -> q553
    -- 554 -> q554
    -- 555 -> q555
    -- 556 -> q556
    -- 557 -> q557
    -- 558 -> q558
    -- 559 -> q559
    -- 560 -> q560
    -- 561 -> q561
    -- 562 -> q562
    -- 563 -> q563
    -- 564 -> q564
    -- 565 -> q565
    -- 566 -> q566
    -- 567 -> q567
    -- 568 -> q568
    -- 569 -> q569
    -- 570 -> q570
    -- 571 -> q571
    -- 572 -> q572
    -- 573 -> q573
    -- 574 -> q574
    -- 575 -> q575
    -- 576 -> q576
    -- 577 -> q577
    -- 578 -> q578
    -- 579 -> q579
    -- 580 -> q580
    -- 581 -> q581
    -- 582 -> q582
    -- 583 -> q583
    -- 584 -> q584
    -- 585 -> q585
    -- 586 -> q586
    -- 587 -> q587
    -- 588 -> q588
    -- 589 -> q589
    -- 590 -> q590
    -- 591 -> q591
    -- 592 -> q592
    -- 593 -> q593
    -- 594 -> q594
    -- 595 -> q595
    -- 596 -> q596
    -- 597 -> q597
    -- 598 -> q598
    -- 599 -> q599
    -- 600 -> q600
    -- 601 -> q601
    -- 602 -> q602
    -- 603 -> q603
    -- 604 -> q604
    -- 605 -> q605
    -- 606 -> q606
    -- 607 -> q607
    -- 608 -> q608
    -- 609 -> q609
    -- 610 -> q610
    -- 611 -> q611
    -- 612 -> q612
    -- 613 -> q613
    -- 614 -> q614
    -- 615 -> q615
    -- 616 -> q616
    -- 617 -> q617
    -- 618 -> q618
    -- 619 -> q619
    -- 620 -> q620
    -- 621 -> q621
    -- 622 -> q622
    -- 623 -> q623
    -- 624 -> q624
    -- 625 -> q625
    -- 626 -> q626
    -- 627 -> q627
    -- 628 -> q628
    -- 629 -> q629
    -- 630 -> q630
    -- 631 -> q631
    -- 632 -> q632
    -- 633 -> q633
    -- 634 -> q634
    -- 635 -> q635
    -- 636 -> q636
    -- 637 -> q637
    -- 638 -> q638
    -- 639 -> q639
    -- 640 -> q640
    -- 641 -> q641
    -- 642 -> q642
    -- 643 -> q643
    -- 644 -> q644
    -- 645 -> q645
    -- 646 -> q646
    -- 647 -> q647
    -- 648 -> q648
    -- 649 -> q649
    -- 650 -> q650
    -- 651 -> q651
    -- 652 -> q652
    -- 653 -> q653
    -- 654 -> q654
    -- 655 -> q655
    -- 656 -> q656
    -- 657 -> q657
    -- 658 -> q658
    -- 659 -> q659
    -- 660 -> q660
    -- 661 -> q661
    -- 662 -> q662
    -- 663 -> q663
    -- 664 -> q664
    -- 665 -> q665
    -- 666 -> q666
    -- 667 -> q667
    -- 668 -> q668
    -- 669 -> q669
    -- 670 -> q670
    -- 671 -> q671
    -- 672 -> q672
    -- 673 -> q673
    -- 674 -> q674
    -- 675 -> q675
    -- 676 -> q676
    -- 677 -> q677
    -- 678 -> q678
    -- 679 -> q679
    -- 680 -> q680
    -- 681 -> q681
    -- 682 -> q682
    -- 683 -> q683
    -- 684 -> q684
    -- 685 -> q685
    -- 686 -> q686
    -- 687 -> q687
    -- 688 -> q688
    -- 689 -> q689
    -- 690 -> q690
    -- 691 -> q691
    -- 692 -> q692
    -- 693 -> q693
    -- 694 -> q694
    -- 695 -> q695
    -- 696 -> q696
    -- 697 -> q697
    -- 698 -> q698
    -- 699 -> q699
    -- 700 -> q700
    x   -> error "that's it so far"
